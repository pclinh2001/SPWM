
SPWM_With_Kalman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e3c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004fd4  08004fd4  00014fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff4  08004ff4  0002087c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ff4  08004ff4  00014ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ffc  08004ffc  0002087c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ffc  08004ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000087c  20000000  08005004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  2000087c  08005880  0002087c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a60  08005880  00020a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002087c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e207  00000000  00000000  000208ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da3  00000000  00000000  0002eab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00030858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00031648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178cf  00000000  00000000  00032378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001005c  00000000  00000000  00049c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000998cc  00000000  00000000  00059ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f356f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e00  00000000  00000000  000f35c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000087c 	.word	0x2000087c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004fbc 	.word	0x08004fbc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000880 	.word	0x20000880
 80001d4:	08004fbc 	.word	0x08004fbc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b974 	b.w	8000e64 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	468e      	mov	lr, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14d      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4694      	mov	ip, r2
 8000ba6:	d969      	bls.n	8000c7c <__udivmoddi4+0xe8>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b152      	cbz	r2, 8000bc4 <__udivmoddi4+0x30>
 8000bae:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb2:	f1c2 0120 	rsb	r1, r2, #32
 8000bb6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000bc2:	4094      	lsls	r4, r2
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	0c21      	lsrs	r1, r4, #16
 8000bca:	fbbe f6f8 	udiv	r6, lr, r8
 8000bce:	fa1f f78c 	uxth.w	r7, ip
 8000bd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000bd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bda:	fb06 f107 	mul.w	r1, r6, r7
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bea:	f080 811f 	bcs.w	8000e2c <__udivmoddi4+0x298>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 811c 	bls.w	8000e2c <__udivmoddi4+0x298>
 8000bf4:	3e02      	subs	r6, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a5b      	subs	r3, r3, r1
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c00:	fb08 3310 	mls	r3, r8, r0, r3
 8000c04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c08:	fb00 f707 	mul.w	r7, r0, r7
 8000c0c:	42a7      	cmp	r7, r4
 8000c0e:	d90a      	bls.n	8000c26 <__udivmoddi4+0x92>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c18:	f080 810a 	bcs.w	8000e30 <__udivmoddi4+0x29c>
 8000c1c:	42a7      	cmp	r7, r4
 8000c1e:	f240 8107 	bls.w	8000e30 <__udivmoddi4+0x29c>
 8000c22:	4464      	add	r4, ip
 8000c24:	3802      	subs	r0, #2
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	1be4      	subs	r4, r4, r7
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	b11d      	cbz	r5, 8000c38 <__udivmoddi4+0xa4>
 8000c30:	40d4      	lsrs	r4, r2
 8000c32:	2300      	movs	r3, #0
 8000c34:	e9c5 4300 	strd	r4, r3, [r5]
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0xc2>
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	f000 80ef 	beq.w	8000e26 <__udivmoddi4+0x292>
 8000c48:	2600      	movs	r6, #0
 8000c4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c4e:	4630      	mov	r0, r6
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	fab3 f683 	clz	r6, r3
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d14a      	bne.n	8000cf4 <__udivmoddi4+0x160>
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xd4>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	f200 80f9 	bhi.w	8000e5a <__udivmoddi4+0x2c6>
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	469e      	mov	lr, r3
 8000c72:	2d00      	cmp	r5, #0
 8000c74:	d0e0      	beq.n	8000c38 <__udivmoddi4+0xa4>
 8000c76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c7a:	e7dd      	b.n	8000c38 <__udivmoddi4+0xa4>
 8000c7c:	b902      	cbnz	r2, 8000c80 <__udivmoddi4+0xec>
 8000c7e:	deff      	udf	#255	; 0xff
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f040 8092 	bne.w	8000dae <__udivmoddi4+0x21a>
 8000c8a:	eba1 010c 	sub.w	r1, r1, ip
 8000c8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c92:	fa1f fe8c 	uxth.w	lr, ip
 8000c96:	2601      	movs	r6, #1
 8000c98:	0c20      	lsrs	r0, r4, #16
 8000c9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ca2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca6:	fb0e f003 	mul.w	r0, lr, r3
 8000caa:	4288      	cmp	r0, r1
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x12c>
 8000cae:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x12a>
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	f200 80cb 	bhi.w	8000e54 <__udivmoddi4+0x2c0>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	1a09      	subs	r1, r1, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ccc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x156>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ce0:	d202      	bcs.n	8000ce8 <__udivmoddi4+0x154>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f200 80bb 	bhi.w	8000e5e <__udivmoddi4+0x2ca>
 8000ce8:	4608      	mov	r0, r1
 8000cea:	eba4 040e 	sub.w	r4, r4, lr
 8000cee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cf2:	e79c      	b.n	8000c2e <__udivmoddi4+0x9a>
 8000cf4:	f1c6 0720 	rsb	r7, r6, #32
 8000cf8:	40b3      	lsls	r3, r6
 8000cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d02:	fa20 f407 	lsr.w	r4, r0, r7
 8000d06:	fa01 f306 	lsl.w	r3, r1, r6
 8000d0a:	431c      	orrs	r4, r3
 8000d0c:	40f9      	lsrs	r1, r7
 8000d0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d12:	fa00 f306 	lsl.w	r3, r0, r6
 8000d16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d1a:	0c20      	lsrs	r0, r4, #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fb09 1118 	mls	r1, r9, r8, r1
 8000d24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d28:	fb08 f00e 	mul.w	r0, r8, lr
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b8>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d3c:	f080 8088 	bcs.w	8000e50 <__udivmoddi4+0x2bc>
 8000d40:	4288      	cmp	r0, r1
 8000d42:	f240 8085 	bls.w	8000e50 <__udivmoddi4+0x2bc>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	4461      	add	r1, ip
 8000d4c:	1a09      	subs	r1, r1, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d54:	fb09 1110 	mls	r1, r9, r0, r1
 8000d58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d60:	458e      	cmp	lr, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1e2>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d6c:	d26c      	bcs.n	8000e48 <__udivmoddi4+0x2b4>
 8000d6e:	458e      	cmp	lr, r1
 8000d70:	d96a      	bls.n	8000e48 <__udivmoddi4+0x2b4>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d7e:	eba1 010e 	sub.w	r1, r1, lr
 8000d82:	42a1      	cmp	r1, r4
 8000d84:	46c8      	mov	r8, r9
 8000d86:	46a6      	mov	lr, r4
 8000d88:	d356      	bcc.n	8000e38 <__udivmoddi4+0x2a4>
 8000d8a:	d053      	beq.n	8000e34 <__udivmoddi4+0x2a0>
 8000d8c:	b15d      	cbz	r5, 8000da6 <__udivmoddi4+0x212>
 8000d8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d92:	eb61 010e 	sbc.w	r1, r1, lr
 8000d96:	fa01 f707 	lsl.w	r7, r1, r7
 8000d9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d9e:	40f1      	lsrs	r1, r6
 8000da0:	431f      	orrs	r7, r3
 8000da2:	e9c5 7100 	strd	r7, r1, [r5]
 8000da6:	2600      	movs	r6, #0
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	40d8      	lsrs	r0, r3
 8000db4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dbc:	4091      	lsls	r1, r2
 8000dbe:	4301      	orrs	r1, r0
 8000dc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000dd0:	0c0b      	lsrs	r3, r1, #16
 8000dd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dda:	429e      	cmp	r6, r3
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x260>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dea:	d22f      	bcs.n	8000e4c <__udivmoddi4+0x2b8>
 8000dec:	429e      	cmp	r6, r3
 8000dee:	d92d      	bls.n	8000e4c <__udivmoddi4+0x2b8>
 8000df0:	3802      	subs	r0, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	1b9b      	subs	r3, r3, r6
 8000df6:	b289      	uxth	r1, r1
 8000df8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dfc:	fb07 3316 	mls	r3, r7, r6, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb06 f30e 	mul.w	r3, r6, lr
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x28a>
 8000e0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e10:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e14:	d216      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d914      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000e1a:	3e02      	subs	r6, #2
 8000e1c:	4461      	add	r1, ip
 8000e1e:	1ac9      	subs	r1, r1, r3
 8000e20:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e24:	e738      	b.n	8000c98 <__udivmoddi4+0x104>
 8000e26:	462e      	mov	r6, r5
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e705      	b.n	8000c38 <__udivmoddi4+0xa4>
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	e6e3      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e30:	4618      	mov	r0, r3
 8000e32:	e6f8      	b.n	8000c26 <__udivmoddi4+0x92>
 8000e34:	454b      	cmp	r3, r9
 8000e36:	d2a9      	bcs.n	8000d8c <__udivmoddi4+0x1f8>
 8000e38:	ebb9 0802 	subs.w	r8, r9, r2
 8000e3c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e40:	3801      	subs	r0, #1
 8000e42:	e7a3      	b.n	8000d8c <__udivmoddi4+0x1f8>
 8000e44:	4646      	mov	r6, r8
 8000e46:	e7ea      	b.n	8000e1e <__udivmoddi4+0x28a>
 8000e48:	4620      	mov	r0, r4
 8000e4a:	e794      	b.n	8000d76 <__udivmoddi4+0x1e2>
 8000e4c:	4640      	mov	r0, r8
 8000e4e:	e7d1      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e50:	46d0      	mov	r8, sl
 8000e52:	e77b      	b.n	8000d4c <__udivmoddi4+0x1b8>
 8000e54:	3b02      	subs	r3, #2
 8000e56:	4461      	add	r1, ip
 8000e58:	e732      	b.n	8000cc0 <__udivmoddi4+0x12c>
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	e709      	b.n	8000c72 <__udivmoddi4+0xde>
 8000e5e:	4464      	add	r4, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e742      	b.n	8000cea <__udivmoddi4+0x156>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <SimpleKalmanFilter>:

//void delay_cycles(int t);
//void delay_us(int t);

void SimpleKalmanFilter(float mea_e, float est_e, float q)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e72:	edc7 0a02 	vstr	s1, [r7, #8]
 8000e76:	ed87 1a01 	vstr	s2, [r7, #4]
  _err_measure=mea_e;
 8000e7a:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <SimpleKalmanFilter+0x30>)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6013      	str	r3, [r2, #0]
  _err_estimate=est_e;
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <SimpleKalmanFilter+0x34>)
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	6013      	str	r3, [r2, #0]
  _q = q;
 8000e86:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <SimpleKalmanFilter+0x38>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	20000898 	.word	0x20000898
 8000e9c:	2000089c 	.word	0x2000089c
 8000ea0:	200008a0 	.word	0x200008a0

08000ea4 <updateEstimate>:

float updateEstimate(float mea)
{
 8000ea4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	ed87 0a01 	vstr	s0, [r7, #4]
  _kalman_gain = _err_estimate/(_err_estimate + _err_measure);
 8000eb0:	4b3d      	ldr	r3, [pc, #244]	; (8000fa8 <updateEstimate+0x104>)
 8000eb2:	edd3 6a00 	vldr	s13, [r3]
 8000eb6:	4b3c      	ldr	r3, [pc, #240]	; (8000fa8 <updateEstimate+0x104>)
 8000eb8:	ed93 7a00 	vldr	s14, [r3]
 8000ebc:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <updateEstimate+0x108>)
 8000ebe:	edd3 7a00 	vldr	s15, [r3]
 8000ec2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eca:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <updateEstimate+0x10c>)
 8000ecc:	edc3 7a00 	vstr	s15, [r3]
  _current_estimate = _last_estimate + _kalman_gain * (mea - _last_estimate);
 8000ed0:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <updateEstimate+0x110>)
 8000ed2:	edd3 7a00 	vldr	s15, [r3]
 8000ed6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000eda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ede:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <updateEstimate+0x10c>)
 8000ee0:	edd3 7a00 	vldr	s15, [r3]
 8000ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee8:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <updateEstimate+0x110>)
 8000eea:	edd3 7a00 	vldr	s15, [r3]
 8000eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef2:	4b31      	ldr	r3, [pc, #196]	; (8000fb8 <updateEstimate+0x114>)
 8000ef4:	edc3 7a00 	vstr	s15, [r3]
  _err_estimate =  (1.0 - _kalman_gain)*_err_estimate + fabs(_last_estimate-_current_estimate)*_q;
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <updateEstimate+0x10c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff facf 	bl	80004a0 <__aeabi_f2d>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	f04f 0000 	mov.w	r0, #0
 8000f0a:	492c      	ldr	r1, [pc, #176]	; (8000fbc <updateEstimate+0x118>)
 8000f0c:	f7ff f968 	bl	80001e0 <__aeabi_dsub>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4614      	mov	r4, r2
 8000f16:	461d      	mov	r5, r3
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <updateEstimate+0x104>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fabf 	bl	80004a0 <__aeabi_f2d>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4620      	mov	r0, r4
 8000f28:	4629      	mov	r1, r5
 8000f2a:	f7ff fb11 	bl	8000550 <__aeabi_dmul>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4690      	mov	r8, r2
 8000f34:	4699      	mov	r9, r3
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <updateEstimate+0x110>)
 8000f38:	ed93 7a00 	vldr	s14, [r3]
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <updateEstimate+0x114>)
 8000f3e:	edd3 7a00 	vldr	s15, [r3]
 8000f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f46:	eef0 7ae7 	vabs.f32	s15, s15
 8000f4a:	ee17 0a90 	vmov	r0, s15
 8000f4e:	f7ff faa7 	bl	80004a0 <__aeabi_f2d>
 8000f52:	4604      	mov	r4, r0
 8000f54:	460d      	mov	r5, r1
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <updateEstimate+0x11c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff faa0 	bl	80004a0 <__aeabi_f2d>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4620      	mov	r0, r4
 8000f66:	4629      	mov	r1, r5
 8000f68:	f7ff faf2 	bl	8000550 <__aeabi_dmul>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4640      	mov	r0, r8
 8000f72:	4649      	mov	r1, r9
 8000f74:	f7ff f936 	bl	80001e4 <__adddf3>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff fda0 	bl	8000ac4 <__aeabi_d2f>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <updateEstimate+0x104>)
 8000f88:	6013      	str	r3, [r2, #0]
  _last_estimate=_current_estimate;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <updateEstimate+0x114>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a09      	ldr	r2, [pc, #36]	; (8000fb4 <updateEstimate+0x110>)
 8000f90:	6013      	str	r3, [r2, #0]

  return _current_estimate;
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <updateEstimate+0x114>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	ee07 3a90 	vmov	s15, r3
}
 8000f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000089c 	.word	0x2000089c
 8000fac:	20000898 	.word	0x20000898
 8000fb0:	200008ac 	.word	0x200008ac
 8000fb4:	200008a8 	.word	0x200008a8
 8000fb8:	200008a4 	.word	0x200008a4
 8000fbc:	3ff00000 	.word	0x3ff00000
 8000fc0:	200008a0 	.word	0x200008a0

08000fc4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	UNUSED (htim);
	if ( htim -> Instance == htim3.Instance)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b49      	ldr	r3, [pc, #292]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	f040 808a 	bne.w	80010ee <HAL_TIM_PeriodElapsedCallback+0x12a>
	{
		TIM1 -> CCR1 = round (A[count] * modulationC );
 8000fda:	4b48      	ldr	r3, [pc, #288]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b47      	ldr	r3, [pc, #284]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000fe2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000fe6:	ee07 3a90 	vmov	s15, r3
 8000fea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fee:	4b45      	ldr	r3, [pc, #276]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000ff0:	edd3 7a00 	vldr	s15, [r3]
 8000ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff8:	ee17 0a90 	vmov	r0, s15
 8000ffc:	f7ff fa50 	bl	80004a0 <__aeabi_f2d>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	ec43 2b10 	vmov	d0, r2, r3
 8001008:	f003 ff92 	bl	8004f30 <round>
 800100c:	ec53 2b10 	vmov	r2, r3, d0
 8001010:	4c3d      	ldr	r4, [pc, #244]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fd35 	bl	8000a84 <__aeabi_d2uiz>
 800101a:	4603      	mov	r3, r0
 800101c:	6363      	str	r3, [r4, #52]	; 0x34
		TIM1 -> CCR2 = round (B[count] * modulationC );
 800101e:	4b37      	ldr	r3, [pc, #220]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	4b39      	ldr	r3, [pc, #228]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001026:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001034:	edd3 7a00 	vldr	s15, [r3]
 8001038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103c:	ee17 0a90 	vmov	r0, s15
 8001040:	f7ff fa2e 	bl	80004a0 <__aeabi_f2d>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	ec43 2b10 	vmov	d0, r2, r3
 800104c:	f003 ff70 	bl	8004f30 <round>
 8001050:	ec53 2b10 	vmov	r2, r3, d0
 8001054:	4c2c      	ldr	r4, [pc, #176]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fd13 	bl	8000a84 <__aeabi_d2uiz>
 800105e:	4603      	mov	r3, r0
 8001060:	63a3      	str	r3, [r4, #56]	; 0x38
		TIM1 -> CCR3 = round (C[count] * modulationC );
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	4b29      	ldr	r3, [pc, #164]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800106a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001080:	ee17 0a90 	vmov	r0, s15
 8001084:	f7ff fa0c 	bl	80004a0 <__aeabi_f2d>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	ec43 2b10 	vmov	d0, r2, r3
 8001090:	f003 ff4e 	bl	8004f30 <round>
 8001094:	ec53 2b10 	vmov	r2, r3, d0
 8001098:	4c1b      	ldr	r4, [pc, #108]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fcf1 	bl	8000a84 <__aeabi_d2uiz>
 80010a2:	4603      	mov	r3, r0
 80010a4:	63e3      	str	r3, [r4, #60]	; 0x3c

		if ( (count < 360) && ( check == 1))
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x138>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80010ae:	d20d      	bcs.n	80010cc <HAL_TIM_PeriodElapsedCallback+0x108>
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d109      	bne.n	80010cc <HAL_TIM_PeriodElapsedCallback+0x108>
		{
			count++;
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x138>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	b29a      	uxth	r2, r3
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x138>)
 80010c2:	801a      	strh	r2, [r3, #0]
			TIM3 -> CNT = 0;
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24
			count = 0;
			HAL_GPIO_TogglePin(GPIOC, LED_Pin);
			TIM1->CCR1 = 0; TIM1->CCR2 = 0; TIM1->CCR3 = 0;
		}
	}
}
 80010ca:	e010      	b.n	80010ee <HAL_TIM_PeriodElapsedCallback+0x12a>
			count = 0;
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x138>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 80010d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d6:	4811      	ldr	r0, [pc, #68]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80010d8:	f002 f845 	bl	8003166 <HAL_GPIO_TogglePin>
			TIM1->CCR1 = 0; TIM1->CCR2 = 0; TIM1->CCR3 = 0;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80010de:	2200      	movs	r2, #0
 80010e0:	635a      	str	r2, [r3, #52]	; 0x34
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	639a      	str	r2, [r3, #56]	; 0x38
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd90      	pop	{r4, r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200009f4 	.word	0x200009f4
 80010fc:	20000a58 	.word	0x20000a58
 8001100:	20000000 	.word	0x20000000
 8001104:	20000a44 	.word	0x20000a44
 8001108:	40010000 	.word	0x40010000
 800110c:	200002d0 	.word	0x200002d0
 8001110:	200005a0 	.word	0x200005a0
 8001114:	20000a5a 	.word	0x20000a5a
 8001118:	40000400 	.word	0x40000400
 800111c:	40020800 	.word	0x40020800

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001126:	f000 fd9b 	bl	8001c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112a:	f000 f91b 	bl	8001364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112e:	f000 fb29 	bl	8001784 <MX_GPIO_Init>
  MX_DMA_Init();
 8001132:	f000 fb07 	bl	8001744 <MX_DMA_Init>
  MX_ADC1_Init();
 8001136:	f000 f97f 	bl	8001438 <MX_ADC1_Init>
  MX_TIM1_Init();
 800113a:	f000 f9fd 	bl	8001538 <MX_TIM1_Init>
  MX_I2C1_Init();
 800113e:	f000 f9cd 	bl	80014dc <MX_I2C1_Init>
  MX_TIM3_Init();
 8001142:	f000 fab1 	bl	80016a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001146:	4872      	ldr	r0, [pc, #456]	; (8001310 <main+0x1f0>)
 8001148:	f002 fe00 	bl	8003d4c <HAL_TIM_Base_Start_IT>
  TIM3 -> ARR = 46620;
 800114c:	4b71      	ldr	r3, [pc, #452]	; (8001314 <main+0x1f4>)
 800114e:	f24b 621c 	movw	r2, #46620	; 0xb61c
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c

  SimpleKalmanFilter(2,2,0.001f);
 8001154:	ed9f 1a70 	vldr	s2, [pc, #448]	; 8001318 <main+0x1f8>
 8001158:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800115c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001160:	f7ff fe82 	bl	8000e68 <SimpleKalmanFilter>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001164:	2100      	movs	r1, #0
 8001166:	486d      	ldr	r0, [pc, #436]	; (800131c <main+0x1fc>)
 8001168:	f002 feda 	bl	8003f20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800116c:	2104      	movs	r1, #4
 800116e:	486b      	ldr	r0, [pc, #428]	; (800131c <main+0x1fc>)
 8001170:	f002 fed6 	bl	8003f20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001174:	2108      	movs	r1, #8
 8001176:	4869      	ldr	r0, [pc, #420]	; (800131c <main+0x1fc>)
 8001178:	f002 fed2 	bl	8003f20 <HAL_TIM_PWM_Start>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800117c:	2100      	movs	r1, #0
 800117e:	4867      	ldr	r0, [pc, #412]	; (800131c <main+0x1fc>)
 8001180:	f003 fd04 	bl	8004b8c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001184:	2104      	movs	r1, #4
 8001186:	4865      	ldr	r0, [pc, #404]	; (800131c <main+0x1fc>)
 8001188:	f003 fd00 	bl	8004b8c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800118c:	2108      	movs	r1, #8
 800118e:	4863      	ldr	r0, [pc, #396]	; (800131c <main+0x1fc>)
 8001190:	f003 fcfc 	bl	8004b8c <HAL_TIMEx_PWMN_Start>

  TIM1->CCR1 = 0; TIM1->CCR2 = 0; TIM1->CCR3 = 0;
 8001194:	4b62      	ldr	r3, [pc, #392]	; (8001320 <main+0x200>)
 8001196:	2200      	movs	r2, #0
 8001198:	635a      	str	r2, [r3, #52]	; 0x34
 800119a:	4b61      	ldr	r3, [pc, #388]	; (8001320 <main+0x200>)
 800119c:	2200      	movs	r2, #0
 800119e:	639a      	str	r2, [r3, #56]	; 0x38
 80011a0:	4b5f      	ldr	r3, [pc, #380]	; (8001320 <main+0x200>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	63da      	str	r2, [r3, #60]	; 0x3c

  count = 0;
 80011a6:	4b5f      	ldr	r3, [pc, #380]	; (8001324 <main+0x204>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_ADC_Start_DMA(&hadc1,&adc_val,1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	495e      	ldr	r1, [pc, #376]	; (8001328 <main+0x208>)
 80011b0:	485e      	ldr	r0, [pc, #376]	; (800132c <main+0x20c>)
 80011b2:	f000 fe0b 	bl	8001dcc <HAL_ADC_Start_DMA>
        u = adc_val;
 80011b6:	4b5c      	ldr	r3, [pc, #368]	; (8001328 <main+0x208>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011c2:	4b5b      	ldr	r3, [pc, #364]	; (8001330 <main+0x210>)
 80011c4:	edc3 7a00 	vstr	s15, [r3]
		u_kalman = updateEstimate(u);
 80011c8:	4b59      	ldr	r3, [pc, #356]	; (8001330 <main+0x210>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	eeb0 0a67 	vmov.f32	s0, s15
 80011d2:	f7ff fe67 	bl	8000ea4 <updateEstimate>
 80011d6:	eef0 7a40 	vmov.f32	s15, s0
 80011da:	4b56      	ldr	r3, [pc, #344]	; (8001334 <main+0x214>)
 80011dc:	edc3 7a00 	vstr	s15, [r3]
		u_kalman = updateEstimate(u_kalman);
 80011e0:	4b54      	ldr	r3, [pc, #336]	; (8001334 <main+0x214>)
 80011e2:	edd3 7a00 	vldr	s15, [r3]
 80011e6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ea:	f7ff fe5b 	bl	8000ea4 <updateEstimate>
 80011ee:	eef0 7a40 	vmov.f32	s15, s0
 80011f2:	4b50      	ldr	r3, [pc, #320]	; (8001334 <main+0x214>)
 80011f4:	edc3 7a00 	vstr	s15, [r3]

	    if ( count == 0) {
 80011f8:	4b4a      	ldr	r3, [pc, #296]	; (8001324 <main+0x204>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1d5      	bne.n	80011ac <main+0x8c>
	          HAL_TIM_Base_Stop_IT(&htim3);
 8001200:	4843      	ldr	r0, [pc, #268]	; (8001310 <main+0x1f0>)
 8001202:	f002 fe05 	bl	8003e10 <HAL_TIM_Base_Stop_IT>
		  	  fsine = u_kalman / 81 ;
 8001206:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <main+0x214>)
 8001208:	ed93 7a00 	vldr	s14, [r3]
 800120c:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001338 <main+0x218>
 8001210:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001218:	edc7 7a01 	vstr	s15, [r7, #4]
 800121c:	793b      	ldrb	r3, [r7, #4]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b46      	ldr	r3, [pc, #280]	; (800133c <main+0x21c>)
 8001222:	701a      	strb	r2, [r3, #0]
		 if ( fsine >= 5)
 8001224:	4b45      	ldr	r3, [pc, #276]	; (800133c <main+0x21c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b04      	cmp	r3, #4
 800122a:	d95c      	bls.n	80012e6 <main+0x1c6>
		 {
		  	  time = 100000 / ( 36 * fsine) ;
 800122c:	4b43      	ldr	r3, [pc, #268]	; (800133c <main+0x21c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4613      	mov	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	461a      	mov	r2, r3
 800123c:	4b40      	ldr	r3, [pc, #256]	; (8001340 <main+0x220>)
 800123e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124a:	4b3e      	ldr	r3, [pc, #248]	; (8001344 <main+0x224>)
 800124c:	edc3 7a00 	vstr	s15, [r3]
		  	  arr_value = time * 84 ;
 8001250:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <main+0x224>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001348 <main+0x228>
 800125a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125e:	4b3b      	ldr	r3, [pc, #236]	; (800134c <main+0x22c>)
 8001260:	edc3 7a00 	vstr	s15, [r3]
		  	  TIM3 -> ARR =  round (arr_value);
 8001264:	4b39      	ldr	r3, [pc, #228]	; (800134c <main+0x22c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f919 	bl	80004a0 <__aeabi_f2d>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	ec43 2b10 	vmov	d0, r2, r3
 8001276:	f003 fe5b 	bl	8004f30 <round>
 800127a:	ec53 2b10 	vmov	r2, r3, d0
 800127e:	4c25      	ldr	r4, [pc, #148]	; (8001314 <main+0x1f4>)
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fbfe 	bl	8000a84 <__aeabi_d2uiz>
 8001288:	4603      	mov	r3, r0
 800128a:	62e3      	str	r3, [r4, #44]	; 0x2c
		  	  modulationC = (7.5* fsine) / 220;
 800128c:	4b2b      	ldr	r3, [pc, #172]	; (800133c <main+0x21c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f8f3 	bl	800047c <__aeabi_i2d>
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <main+0x230>)
 800129c:	f7ff f958 	bl	8000550 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <main+0x234>)
 80012ae:	f7ff fa79 	bl	80007a4 <__aeabi_ddiv>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	f7ff fc03 	bl	8000ac4 <__aeabi_d2f>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a25      	ldr	r2, [pc, #148]	; (8001358 <main+0x238>)
 80012c2:	6013      	str	r3, [r2, #0]
		  	  	  if (modulationC >= 0.9) modulationC = 0.9;
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <main+0x238>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f8e9 	bl	80004a0 <__aeabi_f2d>
 80012ce:	a30e      	add	r3, pc, #56	; (adr r3, 8001308 <main+0x1e8>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff fbc2 	bl	8000a5c <__aeabi_dcmpge>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00b      	beq.n	80012f6 <main+0x1d6>
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <main+0x238>)
 80012e0:	4a1e      	ldr	r2, [pc, #120]	; (800135c <main+0x23c>)
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e007      	b.n	80012f6 <main+0x1d6>
		 }
		 else  if ( fsine < 5)
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <main+0x21c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d803      	bhi.n	80012f6 <main+0x1d6>
		  {
		   	   modulationC = 0;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <main+0x238>)
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
		  }
		 check = 1;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <main+0x240>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	801a      	strh	r2, [r3, #0]
		 HAL_TIM_Base_Start_IT(&htim3);
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <main+0x1f0>)
 80012fe:	f002 fd25 	bl	8003d4c <HAL_TIM_Base_Start_IT>
		HAL_ADC_Start_DMA(&hadc1,&adc_val,1);
 8001302:	e753      	b.n	80011ac <main+0x8c>
 8001304:	f3af 8000 	nop.w
 8001308:	cccccccd 	.word	0xcccccccd
 800130c:	3feccccc 	.word	0x3feccccc
 8001310:	200009f4 	.word	0x200009f4
 8001314:	40000400 	.word	0x40000400
 8001318:	3a83126f 	.word	0x3a83126f
 800131c:	200009ac 	.word	0x200009ac
 8001320:	40010000 	.word	0x40010000
 8001324:	20000a58 	.word	0x20000a58
 8001328:	20000a3c 	.word	0x20000a3c
 800132c:	200008b0 	.word	0x200008b0
 8001330:	20000a50 	.word	0x20000a50
 8001334:	20000a54 	.word	0x20000a54
 8001338:	42a20000 	.word	0x42a20000
 800133c:	20000a40 	.word	0x20000a40
 8001340:	000186a0 	.word	0x000186a0
 8001344:	20000a4c 	.word	0x20000a4c
 8001348:	42a80000 	.word	0x42a80000
 800134c:	20000a48 	.word	0x20000a48
 8001350:	401e0000 	.word	0x401e0000
 8001354:	406b8000 	.word	0x406b8000
 8001358:	20000a44 	.word	0x20000a44
 800135c:	3f666666 	.word	0x3f666666
 8001360:	20000a5a 	.word	0x20000a5a

08001364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b094      	sub	sp, #80	; 0x50
 8001368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136a:	f107 0320 	add.w	r3, r7, #32
 800136e:	2230      	movs	r2, #48	; 0x30
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f003 fdd4 	bl	8004f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	4b28      	ldr	r3, [pc, #160]	; (8001430 <SystemClock_Config+0xcc>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	4a27      	ldr	r2, [pc, #156]	; (8001430 <SystemClock_Config+0xcc>)
 8001392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001396:	6413      	str	r3, [r2, #64]	; 0x40
 8001398:	4b25      	ldr	r3, [pc, #148]	; (8001430 <SystemClock_Config+0xcc>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <SystemClock_Config+0xd0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013b0:	4a20      	ldr	r2, [pc, #128]	; (8001434 <SystemClock_Config+0xd0>)
 80013b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <SystemClock_Config+0xd0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c4:	2301      	movs	r3, #1
 80013c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ce:	2302      	movs	r3, #2
 80013d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013d8:	2319      	movs	r3, #25
 80013da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013dc:	23a8      	movs	r3, #168	; 0xa8
 80013de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013e4:	2304      	movs	r3, #4
 80013e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e8:	f107 0320 	add.w	r3, r7, #32
 80013ec:	4618      	mov	r0, r3
 80013ee:	f002 f819 	bl	8003424 <HAL_RCC_OscConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013f8:	f000 fa32 	bl	8001860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fc:	230f      	movs	r3, #15
 80013fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001400:	2302      	movs	r3, #2
 8001402:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2102      	movs	r1, #2
 8001418:	4618      	mov	r0, r3
 800141a:	f002 fa7b 	bl	8003914 <HAL_RCC_ClockConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001424:	f000 fa1c 	bl	8001860 <Error_Handler>
  }
}
 8001428:	bf00      	nop
 800142a:	3750      	adds	r7, #80	; 0x50
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40007000 	.word	0x40007000

08001438 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800143e:	463b      	mov	r3, r7
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <MX_ADC1_Init+0x98>)
 800144c:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <MX_ADC1_Init+0x9c>)
 800144e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001450:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <MX_ADC1_Init+0x98>)
 8001452:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001456:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <MX_ADC1_Init+0x98>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <MX_ADC1_Init+0x98>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_ADC1_Init+0x98>)
 8001466:	2200      	movs	r2, #0
 8001468:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <MX_ADC1_Init+0x98>)
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_ADC1_Init+0x98>)
 8001474:	2200      	movs	r2, #0
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_ADC1_Init+0x98>)
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <MX_ADC1_Init+0xa0>)
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_ADC1_Init+0x98>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_ADC1_Init+0x98>)
 8001486:	2201      	movs	r2, #1
 8001488:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_ADC1_Init+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_ADC1_Init+0x98>)
 8001494:	2201      	movs	r2, #1
 8001496:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001498:	480d      	ldr	r0, [pc, #52]	; (80014d0 <MX_ADC1_Init+0x98>)
 800149a:	f000 fc53 	bl	8001d44 <HAL_ADC_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014a4:	f000 f9dc 	bl	8001860 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014ac:	2301      	movs	r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80014b0:	2306      	movs	r3, #6
 80014b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b4:	463b      	mov	r3, r7
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_ADC1_Init+0x98>)
 80014ba:	f000 fd95 	bl	8001fe8 <HAL_ADC_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014c4:	f000 f9cc 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200008b0 	.word	0x200008b0
 80014d4:	40012000 	.word	0x40012000
 80014d8:	0f000001 	.word	0x0f000001

080014dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_I2C1_Init+0x50>)
 80014e2:	4a13      	ldr	r2, [pc, #76]	; (8001530 <MX_I2C1_Init+0x54>)
 80014e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_I2C1_Init+0x50>)
 80014e8:	4a12      	ldr	r2, [pc, #72]	; (8001534 <MX_I2C1_Init+0x58>)
 80014ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_I2C1_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_I2C1_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_I2C1_Init+0x50>)
 80014fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <MX_I2C1_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_I2C1_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <MX_I2C1_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_I2C1_Init+0x50>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <MX_I2C1_Init+0x50>)
 800151a:	f001 fe3f 	bl	800319c <HAL_I2C_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001524:	f000 f99c 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000958 	.word	0x20000958
 8001530:	40005400 	.word	0x40005400
 8001534:	000186a0 	.word	0x000186a0

08001538 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b096      	sub	sp, #88	; 0x58
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2220      	movs	r2, #32
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f003 fcd5 	bl	8004f20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001576:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <MX_TIM1_Init+0x168>)
 8001578:	4a4a      	ldr	r2, [pc, #296]	; (80016a4 <MX_TIM1_Init+0x16c>)
 800157a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 800157c:	4b48      	ldr	r3, [pc, #288]	; (80016a0 <MX_TIM1_Init+0x168>)
 800157e:	2204      	movs	r2, #4
 8001580:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001582:	4b47      	ldr	r3, [pc, #284]	; (80016a0 <MX_TIM1_Init+0x168>)
 8001584:	2220      	movs	r2, #32
 8001586:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1050;
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <MX_TIM1_Init+0x168>)
 800158a:	f240 421a 	movw	r2, #1050	; 0x41a
 800158e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <MX_TIM1_Init+0x168>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001596:	4b42      	ldr	r3, [pc, #264]	; (80016a0 <MX_TIM1_Init+0x168>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800159c:	4b40      	ldr	r3, [pc, #256]	; (80016a0 <MX_TIM1_Init+0x168>)
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015a2:	483f      	ldr	r0, [pc, #252]	; (80016a0 <MX_TIM1_Init+0x168>)
 80015a4:	f002 fb82 	bl	8003cac <HAL_TIM_Base_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015ae:	f000 f957 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015bc:	4619      	mov	r1, r3
 80015be:	4838      	ldr	r0, [pc, #224]	; (80016a0 <MX_TIM1_Init+0x168>)
 80015c0:	f002 ff28 	bl	8004414 <HAL_TIM_ConfigClockSource>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015ca:	f000 f949 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015ce:	4834      	ldr	r0, [pc, #208]	; (80016a0 <MX_TIM1_Init+0x168>)
 80015d0:	f002 fc4d 	bl	8003e6e <HAL_TIM_PWM_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80015da:	f000 f941 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ea:	4619      	mov	r1, r3
 80015ec:	482c      	ldr	r0, [pc, #176]	; (80016a0 <MX_TIM1_Init+0x168>)
 80015ee:	f003 fb79 	bl	8004ce4 <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015f8:	f000 f932 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015fc:	2360      	movs	r3, #96	; 0x60
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001604:	2300      	movs	r3, #0
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001608:	2300      	movs	r3, #0
 800160a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	2200      	movs	r2, #0
 800161e:	4619      	mov	r1, r3
 8001620:	481f      	ldr	r0, [pc, #124]	; (80016a0 <MX_TIM1_Init+0x168>)
 8001622:	f002 fe35 	bl	8004290 <HAL_TIM_PWM_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800162c:	f000 f918 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	2204      	movs	r2, #4
 8001636:	4619      	mov	r1, r3
 8001638:	4819      	ldr	r0, [pc, #100]	; (80016a0 <MX_TIM1_Init+0x168>)
 800163a:	f002 fe29 	bl	8004290 <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001644:	f000 f90c 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164c:	2208      	movs	r2, #8
 800164e:	4619      	mov	r1, r3
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <MX_TIM1_Init+0x168>)
 8001652:	f002 fe1d 	bl	8004290 <HAL_TIM_PWM_ConfigChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800165c:	f000 f900 	bl	8001860 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 202;
 800166c:	23ca      	movs	r3, #202	; 0xca
 800166e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001678:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	4619      	mov	r1, r3
 8001682:	4807      	ldr	r0, [pc, #28]	; (80016a0 <MX_TIM1_Init+0x168>)
 8001684:	f003 fb9c 	bl	8004dc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800168e:	f000 f8e7 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <MX_TIM1_Init+0x168>)
 8001694:	f000 fa10 	bl	8001ab8 <HAL_TIM_MspPostInit>

}
 8001698:	bf00      	nop
 800169a:	3758      	adds	r7, #88	; 0x58
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200009ac 	.word	0x200009ac
 80016a4:	40010000 	.word	0x40010000

080016a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016bc:	463b      	mov	r3, r7
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <MX_TIM3_Init+0x94>)
 80016c6:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <MX_TIM3_Init+0x98>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <MX_TIM3_Init+0x94>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <MX_TIM3_Init+0x94>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <MX_TIM3_Init+0x94>)
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <MX_TIM3_Init+0x94>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_TIM3_Init+0x94>)
 80016e6:	2280      	movs	r2, #128	; 0x80
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016ea:	4814      	ldr	r0, [pc, #80]	; (800173c <MX_TIM3_Init+0x94>)
 80016ec:	f002 fade 	bl	8003cac <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80016f6:	f000 f8b3 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	4619      	mov	r1, r3
 8001706:	480d      	ldr	r0, [pc, #52]	; (800173c <MX_TIM3_Init+0x94>)
 8001708:	f002 fe84 	bl	8004414 <HAL_TIM_ConfigClockSource>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001712:	f000 f8a5 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800171e:	463b      	mov	r3, r7
 8001720:	4619      	mov	r1, r3
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <MX_TIM3_Init+0x94>)
 8001724:	f003 fade 	bl	8004ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800172e:	f000 f897 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200009f4 	.word	0x200009f4
 8001740:	40000400 	.word	0x40000400

08001744 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_DMA_Init+0x3c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <MX_DMA_Init+0x3c>)
 8001754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_DMA_Init+0x3c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2102      	movs	r1, #2
 800176a:	2038      	movs	r0, #56	; 0x38
 800176c:	f000 ffb7 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001770:	2038      	movs	r0, #56	; 0x38
 8001772:	f000 ffd0 	bl	8002716 <HAL_NVIC_EnableIRQ>

}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <MX_GPIO_Init+0xd4>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a2d      	ldr	r2, [pc, #180]	; (8001858 <MX_GPIO_Init+0xd4>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <MX_GPIO_Init+0xd4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b27      	ldr	r3, [pc, #156]	; (8001858 <MX_GPIO_Init+0xd4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a26      	ldr	r2, [pc, #152]	; (8001858 <MX_GPIO_Init+0xd4>)
 80017c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b24      	ldr	r3, [pc, #144]	; (8001858 <MX_GPIO_Init+0xd4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <MX_GPIO_Init+0xd4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <MX_GPIO_Init+0xd4>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <MX_GPIO_Init+0xd4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <MX_GPIO_Init+0xd4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a18      	ldr	r2, [pc, #96]	; (8001858 <MX_GPIO_Init+0xd4>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <MX_GPIO_Init+0xd4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001810:	4812      	ldr	r0, [pc, #72]	; (800185c <MX_GPIO_Init+0xd8>)
 8001812:	f001 fc8f 	bl	8003134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181c:	2301      	movs	r3, #1
 800181e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <MX_GPIO_Init+0xd8>)
 8001830:	f001 fafc 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001834:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_GPIO_Init+0xd8>)
 800184a:	f001 faef 	bl	8002e2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800
 800185c:	40020800 	.word	0x40020800

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001868:	e7fe      	b.n	8001868 <Error_Handler+0x8>
	...

0800186c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_MspInit+0x4c>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <HAL_MspInit+0x4c>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_MspInit+0x4c>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_MspInit+0x4c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <HAL_MspInit+0x4c>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_MspInit+0x4c>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800

080018bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a2f      	ldr	r2, [pc, #188]	; (8001998 <HAL_ADC_MspInit+0xdc>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d157      	bne.n	800198e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b2e      	ldr	r3, [pc, #184]	; (800199c <HAL_ADC_MspInit+0xe0>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a2d      	ldr	r2, [pc, #180]	; (800199c <HAL_ADC_MspInit+0xe0>)
 80018e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
 80018ee:	4b2b      	ldr	r3, [pc, #172]	; (800199c <HAL_ADC_MspInit+0xe0>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b27      	ldr	r3, [pc, #156]	; (800199c <HAL_ADC_MspInit+0xe0>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a26      	ldr	r2, [pc, #152]	; (800199c <HAL_ADC_MspInit+0xe0>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_ADC_MspInit+0xe0>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001916:	2301      	movs	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800191a:	2303      	movs	r3, #3
 800191c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	481d      	ldr	r0, [pc, #116]	; (80019a0 <HAL_ADC_MspInit+0xe4>)
 800192a:	f001 fa7f 	bl	8002e2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <HAL_ADC_MspInit+0xe8>)
 8001930:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_ADC_MspInit+0xec>)
 8001932:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_ADC_MspInit+0xe8>)
 8001936:	2200      	movs	r2, #0
 8001938:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_ADC_MspInit+0xe8>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001940:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_ADC_MspInit+0xe8>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_ADC_MspInit+0xe8>)
 8001948:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800194c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_ADC_MspInit+0xe8>)
 8001950:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001954:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_ADC_MspInit+0xe8>)
 8001958:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800195c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_ADC_MspInit+0xe8>)
 8001960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001964:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_ADC_MspInit+0xe8>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <HAL_ADC_MspInit+0xe8>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001972:	480c      	ldr	r0, [pc, #48]	; (80019a4 <HAL_ADC_MspInit+0xe8>)
 8001974:	f000 feea 	bl	800274c <HAL_DMA_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800197e:	f7ff ff6f 	bl	8001860 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <HAL_ADC_MspInit+0xe8>)
 8001986:	639a      	str	r2, [r3, #56]	; 0x38
 8001988:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <HAL_ADC_MspInit+0xe8>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40012000 	.word	0x40012000
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020000 	.word	0x40020000
 80019a4:	200008f8 	.word	0x200008f8
 80019a8:	40026410 	.word	0x40026410

080019ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <HAL_I2C_MspInit+0x84>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12b      	bne.n	8001a26 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ea:	23c0      	movs	r3, #192	; 0xc0
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ee:	2312      	movs	r3, #18
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019fa:	2304      	movs	r3, #4
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <HAL_I2C_MspInit+0x8c>)
 8001a06:	f001 fa11 	bl	8002e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 8001a14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40005400 	.word	0x40005400
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020400 	.word	0x40020400

08001a3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a18      	ldr	r2, [pc, #96]	; (8001aac <HAL_TIM_Base_MspInit+0x70>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d10e      	bne.n	8001a6c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_TIM_Base_MspInit+0x74>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a16      	ldr	r2, [pc, #88]	; (8001ab0 <HAL_TIM_Base_MspInit+0x74>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_TIM_Base_MspInit+0x74>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a6a:	e01a      	b.n	8001aa2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_TIM_Base_MspInit+0x78>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d115      	bne.n	8001aa2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_TIM_Base_MspInit+0x74>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <HAL_TIM_Base_MspInit+0x74>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_TIM_Base_MspInit+0x74>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2101      	movs	r1, #1
 8001a96:	201d      	movs	r0, #29
 8001a98:	f000 fe21 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a9c:	201d      	movs	r0, #29
 8001a9e:	f000 fe3a 	bl	8002716 <HAL_NVIC_EnableIRQ>
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40000400 	.word	0x40000400

08001ab8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a21      	ldr	r2, [pc, #132]	; (8001b5c <HAL_TIM_MspPostInit+0xa4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d13c      	bne.n	8001b54 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <HAL_TIM_MspPostInit+0xa8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <HAL_TIM_MspPostInit+0xa8>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_TIM_MspPostInit+0xa8>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_TIM_MspPostInit+0xa8>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a18      	ldr	r2, [pc, #96]	; (8001b60 <HAL_TIM_MspPostInit+0xa8>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <HAL_TIM_MspPostInit+0xa8>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001b12:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b24:	2301      	movs	r3, #1
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	480d      	ldr	r0, [pc, #52]	; (8001b64 <HAL_TIM_MspPostInit+0xac>)
 8001b30:	f001 f97c 	bl	8002e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b34:	2303      	movs	r3, #3
 8001b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b44:	2301      	movs	r3, #1
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4806      	ldr	r0, [pc, #24]	; (8001b68 <HAL_TIM_MspPostInit+0xb0>)
 8001b50:	f001 f96c 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b54:	bf00      	nop
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40010000 	.word	0x40010000
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40020400 	.word	0x40020400

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <NMI_Handler+0x4>

08001b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <HardFault_Handler+0x4>

08001b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <MemManage_Handler+0x4>

08001b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <BusFault_Handler+0x4>

08001b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <UsageFault_Handler+0x4>

08001b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb8:	f000 f8a4 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <TIM3_IRQHandler+0x10>)
 8001bc6:	f002 fa5b 	bl	8004080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200009f4 	.word	0x200009f4

08001bd4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <DMA2_Stream0_IRQHandler+0x10>)
 8001bda:	f000 febd 	bl	8002958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200008f8 	.word	0x200008f8

08001be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <SystemInit+0x20>)
 8001bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <SystemInit+0x20>)
 8001bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c12:	490e      	ldr	r1, [pc, #56]	; (8001c4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c14:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c28:	4c0b      	ldr	r4, [pc, #44]	; (8001c58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c36:	f7ff ffd7 	bl	8001be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c3a:	f003 f94d 	bl	8004ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3e:	f7ff fa6f 	bl	8001120 <main>
  bx  lr    
 8001c42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c4c:	2000087c 	.word	0x2000087c
  ldr r2, =_sidata
 8001c50:	08005004 	.word	0x08005004
  ldr r2, =_sbss
 8001c54:	2000087c 	.word	0x2000087c
  ldr r4, =_ebss
 8001c58:	20000a60 	.word	0x20000a60

08001c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC_IRQHandler>
	...

08001c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <HAL_Init+0x40>)
 8001c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_Init+0x40>)
 8001c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_Init+0x40>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <HAL_Init+0x40>)
 8001c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c88:	2003      	movs	r0, #3
 8001c8a:	f000 fd1d 	bl	80026c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 f808 	bl	8001ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c94:	f7ff fdea 	bl	800186c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023c00 	.word	0x40023c00

08001ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_InitTick+0x54>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_InitTick+0x58>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fd35 	bl	8002732 <HAL_SYSTICK_Config>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00e      	b.n	8001cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b0f      	cmp	r3, #15
 8001cd6:	d80a      	bhi.n	8001cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f000 fcfd 	bl	80026de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce4:	4a06      	ldr	r2, [pc, #24]	; (8001d00 <HAL_InitTick+0x5c>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000870 	.word	0x20000870
 8001cfc:	20000878 	.word	0x20000878
 8001d00:	20000874 	.word	0x20000874

08001d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_IncTick+0x20>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x24>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <HAL_IncTick+0x24>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000878 	.word	0x20000878
 8001d28:	20000a5c 	.word	0x20000a5c

08001d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_GetTick+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000a5c 	.word	0x20000a5c

08001d44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e033      	b.n	8001dc2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d109      	bne.n	8001d76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff fdaa 	bl	80018bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d118      	bne.n	8001db4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d8a:	f023 0302 	bic.w	r3, r3, #2
 8001d8e:	f043 0202 	orr.w	r2, r3, #2
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fa48 	bl	800222c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f023 0303 	bic.w	r3, r3, #3
 8001daa:	f043 0201 	orr.w	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
 8001db2:	e001      	b.n	8001db8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_Start_DMA+0x1e>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e0ce      	b.n	8001f88 <HAL_ADC_Start_DMA+0x1bc>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d018      	beq.n	8001e32 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e10:	4b5f      	ldr	r3, [pc, #380]	; (8001f90 <HAL_ADC_Start_DMA+0x1c4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a5f      	ldr	r2, [pc, #380]	; (8001f94 <HAL_ADC_Start_DMA+0x1c8>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0c9a      	lsrs	r2, r3, #18
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e24:	e002      	b.n	8001e2c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f9      	bne.n	8001e26 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e40:	d107      	bne.n	8001e52 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e50:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	f040 8086 	bne.w	8001f6e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea0:	d106      	bne.n	8001eb0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f023 0206 	bic.w	r2, r3, #6
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	645a      	str	r2, [r3, #68]	; 0x44
 8001eae:	e002      	b.n	8001eb6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ebe:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <HAL_ADC_Start_DMA+0x1cc>)
 8001ec0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec6:	4a35      	ldr	r2, [pc, #212]	; (8001f9c <HAL_ADC_Start_DMA+0x1d0>)
 8001ec8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ece:	4a34      	ldr	r2, [pc, #208]	; (8001fa0 <HAL_ADC_Start_DMA+0x1d4>)
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed6:	4a33      	ldr	r2, [pc, #204]	; (8001fa4 <HAL_ADC_Start_DMA+0x1d8>)
 8001ed8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ee2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ef2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f02:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	334c      	adds	r3, #76	; 0x4c
 8001f0e:	4619      	mov	r1, r3
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f000 fcc8 	bl	80028a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10f      	bne.n	8001f44 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d129      	bne.n	8001f86 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	e020      	b.n	8001f86 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <HAL_ADC_Start_DMA+0x1dc>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d11b      	bne.n	8001f86 <HAL_ADC_Start_DMA+0x1ba>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d114      	bne.n	8001f86 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	e00b      	b.n	8001f86 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f043 0210 	orr.w	r2, r3, #16
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f043 0201 	orr.w	r2, r3, #1
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000870 	.word	0x20000870
 8001f94:	431bde83 	.word	0x431bde83
 8001f98:	40012300 	.word	0x40012300
 8001f9c:	08002425 	.word	0x08002425
 8001fa0:	080024df 	.word	0x080024df
 8001fa4:	080024fb 	.word	0x080024fb
 8001fa8:	40012000 	.word	0x40012000

08001fac <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1c>
 8002000:	2302      	movs	r3, #2
 8002002:	e105      	b.n	8002210 <HAL_ADC_ConfigChannel+0x228>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b09      	cmp	r3, #9
 8002012:	d925      	bls.n	8002060 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68d9      	ldr	r1, [r3, #12]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	b29b      	uxth	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	3b1e      	subs	r3, #30
 800202a:	2207      	movs	r2, #7
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43da      	mvns	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	400a      	ands	r2, r1
 8002038:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68d9      	ldr	r1, [r3, #12]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	4618      	mov	r0, r3
 800204c:	4603      	mov	r3, r0
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4403      	add	r3, r0
 8002052:	3b1e      	subs	r3, #30
 8002054:	409a      	lsls	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	e022      	b.n	80020a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6919      	ldr	r1, [r3, #16]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	2207      	movs	r2, #7
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	400a      	ands	r2, r1
 8002082:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6919      	ldr	r1, [r3, #16]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	4618      	mov	r0, r3
 8002096:	4603      	mov	r3, r0
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4403      	add	r3, r0
 800209c:	409a      	lsls	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d824      	bhi.n	80020f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	3b05      	subs	r3, #5
 80020c0:	221f      	movs	r2, #31
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	400a      	ands	r2, r1
 80020ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	4618      	mov	r0, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	3b05      	subs	r3, #5
 80020ea:	fa00 f203 	lsl.w	r2, r0, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	635a      	str	r2, [r3, #52]	; 0x34
 80020f6:	e04c      	b.n	8002192 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b0c      	cmp	r3, #12
 80020fe:	d824      	bhi.n	800214a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	3b23      	subs	r3, #35	; 0x23
 8002112:	221f      	movs	r2, #31
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43da      	mvns	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	400a      	ands	r2, r1
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	b29b      	uxth	r3, r3
 800212e:	4618      	mov	r0, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	3b23      	subs	r3, #35	; 0x23
 800213c:	fa00 f203 	lsl.w	r2, r0, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
 8002148:	e023      	b.n	8002192 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	3b41      	subs	r3, #65	; 0x41
 800215c:	221f      	movs	r2, #31
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	400a      	ands	r2, r1
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	4618      	mov	r0, r3
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	3b41      	subs	r3, #65	; 0x41
 8002186:	fa00 f203 	lsl.w	r2, r0, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002192:	4b22      	ldr	r3, [pc, #136]	; (800221c <HAL_ADC_ConfigChannel+0x234>)
 8002194:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a21      	ldr	r2, [pc, #132]	; (8002220 <HAL_ADC_ConfigChannel+0x238>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d109      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x1cc>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b12      	cmp	r3, #18
 80021a6:	d105      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a19      	ldr	r2, [pc, #100]	; (8002220 <HAL_ADC_ConfigChannel+0x238>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d123      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x21e>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b10      	cmp	r3, #16
 80021c4:	d003      	beq.n	80021ce <HAL_ADC_ConfigChannel+0x1e6>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b11      	cmp	r3, #17
 80021cc:	d11b      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b10      	cmp	r3, #16
 80021e0:	d111      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_ADC_ConfigChannel+0x23c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a10      	ldr	r2, [pc, #64]	; (8002228 <HAL_ADC_ConfigChannel+0x240>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	0c9a      	lsrs	r2, r3, #18
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021f8:	e002      	b.n	8002200 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f9      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40012300 	.word	0x40012300
 8002220:	40012000 	.word	0x40012000
 8002224:	20000870 	.word	0x20000870
 8002228:	431bde83 	.word	0x431bde83

0800222c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002234:	4b79      	ldr	r3, [pc, #484]	; (800241c <ADC_Init+0x1f0>)
 8002236:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	431a      	orrs	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002260:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	021a      	lsls	r2, r3, #8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002284:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6899      	ldr	r1, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022be:	4a58      	ldr	r2, [pc, #352]	; (8002420 <ADC_Init+0x1f4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d022      	beq.n	800230a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6899      	ldr	r1, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6899      	ldr	r1, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	e00f      	b.n	800232a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002318:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002328:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0202 	bic.w	r2, r2, #2
 8002338:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6899      	ldr	r1, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	7e1b      	ldrb	r3, [r3, #24]
 8002344:	005a      	lsls	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d01b      	beq.n	8002390 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002366:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002376:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6859      	ldr	r1, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	3b01      	subs	r3, #1
 8002384:	035a      	lsls	r2, r3, #13
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	e007      	b.n	80023a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800239e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	051a      	lsls	r2, r3, #20
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6899      	ldr	r1, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023e2:	025a      	lsls	r2, r3, #9
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6899      	ldr	r1, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	029a      	lsls	r2, r3, #10
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	609a      	str	r2, [r3, #8]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40012300 	.word	0x40012300
 8002420:	0f000001 	.word	0x0f000001

08002424 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800243a:	2b00      	cmp	r3, #0
 800243c:	d13c      	bne.n	80024b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d12b      	bne.n	80024b0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800245c:	2b00      	cmp	r3, #0
 800245e:	d127      	bne.n	80024b0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800246a:	2b00      	cmp	r3, #0
 800246c:	d006      	beq.n	800247c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002478:	2b00      	cmp	r3, #0
 800247a:	d119      	bne.n	80024b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0220 	bic.w	r2, r2, #32
 800248a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f7ff fd7b 	bl	8001fac <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024b6:	e00e      	b.n	80024d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff fd85 	bl	8001fd4 <HAL_ADC_ErrorCallback>
}
 80024ca:	e004      	b.n	80024d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	4798      	blx	r3
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f7ff fd67 	bl	8001fc0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2240      	movs	r2, #64	; 0x40
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	f043 0204 	orr.w	r2, r3, #4
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7ff fd5a 	bl	8001fd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255a:	4a04      	ldr	r2, [pc, #16]	; (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60d3      	str	r3, [r2, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db0b      	blt.n	80025b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4907      	ldr	r1, [pc, #28]	; (80025c4 <__NVIC_EnableIRQ+0x38>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2001      	movs	r0, #1
 80025ae:	fa00 f202 	lsl.w	r2, r0, r2
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	; (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	; (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
         );
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	; 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002694:	d301      	bcc.n	800269a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002696:	2301      	movs	r3, #1
 8002698:	e00f      	b.n	80026ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <SysTick_Config+0x40>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a2:	210f      	movs	r1, #15
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	f7ff ff8e 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <SysTick_Config+0x40>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b2:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <SysTick_Config+0x40>)
 80026b4:	2207      	movs	r2, #7
 80026b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ff29 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f0:	f7ff ff3e 	bl	8002570 <__NVIC_GetPriorityGrouping>
 80026f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	f7ff ff8e 	bl	800261c <NVIC_EncodePriority>
 8002700:	4602      	mov	r2, r0
 8002702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff5d 	bl	80025c8 <__NVIC_SetPriority>
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff31 	bl	800258c <__NVIC_EnableIRQ>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ffa2 	bl	8002684 <SysTick_Config>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff fae8 	bl	8001d2c <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e099      	b.n	800289c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002788:	e00f      	b.n	80027aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800278a:	f7ff facf 	bl	8001d2c <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b05      	cmp	r3, #5
 8002796:	d908      	bls.n	80027aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2203      	movs	r2, #3
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e078      	b.n	800289c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e8      	bne.n	800278a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4b38      	ldr	r3, [pc, #224]	; (80028a4 <HAL_DMA_Init+0x158>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	2b04      	cmp	r3, #4
 8002802:	d107      	bne.n	8002814 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	4313      	orrs	r3, r2
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4313      	orrs	r3, r2
 8002812:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f023 0307 	bic.w	r3, r3, #7
 800282a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	2b04      	cmp	r3, #4
 800283c:	d117      	bne.n	800286e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00e      	beq.n	800286e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fa6f 	bl	8002d34 <DMA_CheckFifoParam>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2240      	movs	r2, #64	; 0x40
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800286a:	2301      	movs	r3, #1
 800286c:	e016      	b.n	800289c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fa26 	bl	8002cc8 <DMA_CalcBaseAndBitshift>
 800287c:	4603      	mov	r3, r0
 800287e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	223f      	movs	r2, #63	; 0x3f
 8002886:	409a      	lsls	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	f010803f 	.word	0xf010803f

080028a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_DMA_Start_IT+0x26>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e040      	b.n	8002950 <HAL_DMA_Start_IT+0xa8>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d12f      	bne.n	8002942 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2202      	movs	r2, #2
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f9b8 	bl	8002c6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	223f      	movs	r2, #63	; 0x3f
 8002902:	409a      	lsls	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0216 	orr.w	r2, r2, #22
 8002916:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0208 	orr.w	r2, r2, #8
 800292e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	e005      	b.n	800294e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800294a:	2302      	movs	r3, #2
 800294c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800294e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002964:	4b8e      	ldr	r3, [pc, #568]	; (8002ba0 <HAL_DMA_IRQHandler+0x248>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a8e      	ldr	r2, [pc, #568]	; (8002ba4 <HAL_DMA_IRQHandler+0x24c>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0a9b      	lsrs	r3, r3, #10
 8002970:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002982:	2208      	movs	r2, #8
 8002984:	409a      	lsls	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d01a      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d013      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0204 	bic.w	r2, r2, #4
 80029aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	2208      	movs	r2, #8
 80029b2:	409a      	lsls	r2, r3
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f043 0201 	orr.w	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	2201      	movs	r2, #1
 80029ca:	409a      	lsls	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d012      	beq.n	80029fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00b      	beq.n	80029fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e6:	2201      	movs	r2, #1
 80029e8:	409a      	lsls	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	f043 0202 	orr.w	r2, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fe:	2204      	movs	r2, #4
 8002a00:	409a      	lsls	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d012      	beq.n	8002a30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00b      	beq.n	8002a30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a28:	f043 0204 	orr.w	r2, r3, #4
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	2210      	movs	r2, #16
 8002a36:	409a      	lsls	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d043      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d03c      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a52:	2210      	movs	r2, #16
 8002a54:	409a      	lsls	r2, r3
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d018      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d108      	bne.n	8002a88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d024      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
 8002a86:	e01f      	b.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01b      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
 8002a98:	e016      	b.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d107      	bne.n	8002ab8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0208 	bic.w	r2, r2, #8
 8002ab6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	2220      	movs	r2, #32
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 808f 	beq.w	8002bf8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8087 	beq.w	8002bf8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	2220      	movs	r2, #32
 8002af0:	409a      	lsls	r2, r3
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b05      	cmp	r3, #5
 8002b00:	d136      	bne.n	8002b70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0216 	bic.w	r2, r2, #22
 8002b10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <HAL_DMA_IRQHandler+0x1da>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0208 	bic.w	r2, r2, #8
 8002b40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	223f      	movs	r2, #63	; 0x3f
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d07e      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
        }
        return;
 8002b6e:	e079      	b.n	8002c64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01d      	beq.n	8002bba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10d      	bne.n	8002ba8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d031      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
 8002b9c:	e02c      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x2a0>
 8002b9e:	bf00      	nop
 8002ba0:	20000870 	.word	0x20000870
 8002ba4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d023      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
 8002bb8:	e01e      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10f      	bne.n	8002be8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0210 	bic.w	r2, r2, #16
 8002bd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d032      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d022      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2205      	movs	r2, #5
 8002c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0201 	bic.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	3301      	adds	r3, #1
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d307      	bcc.n	8002c40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f2      	bne.n	8002c24 <HAL_DMA_IRQHandler+0x2cc>
 8002c3e:	e000      	b.n	8002c42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
 8002c62:	e000      	b.n	8002c66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c64:	bf00      	nop
    }
  }
}
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d108      	bne.n	8002cac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002caa:	e007      	b.n	8002cbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	60da      	str	r2, [r3, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	3b10      	subs	r3, #16
 8002cd8:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <DMA_CalcBaseAndBitshift+0x64>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ce2:	4a13      	ldr	r2, [pc, #76]	; (8002d30 <DMA_CalcBaseAndBitshift+0x68>)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d909      	bls.n	8002d0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cfe:	f023 0303 	bic.w	r3, r3, #3
 8002d02:	1d1a      	adds	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	659a      	str	r2, [r3, #88]	; 0x58
 8002d08:	e007      	b.n	8002d1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d12:	f023 0303 	bic.w	r3, r3, #3
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	aaaaaaab 	.word	0xaaaaaaab
 8002d30:	08004fec 	.word	0x08004fec

08002d34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d11f      	bne.n	8002d8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d856      	bhi.n	8002e02 <DMA_CheckFifoParam+0xce>
 8002d54:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <DMA_CheckFifoParam+0x28>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08002d7f 	.word	0x08002d7f
 8002d64:	08002d6d 	.word	0x08002d6d
 8002d68:	08002e03 	.word	0x08002e03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d046      	beq.n	8002e06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d7c:	e043      	b.n	8002e06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d86:	d140      	bne.n	8002e0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8c:	e03d      	b.n	8002e0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d96:	d121      	bne.n	8002ddc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d837      	bhi.n	8002e0e <DMA_CheckFifoParam+0xda>
 8002d9e:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <DMA_CheckFifoParam+0x70>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002db5 	.word	0x08002db5
 8002da8:	08002dbb 	.word	0x08002dbb
 8002dac:	08002db5 	.word	0x08002db5
 8002db0:	08002dcd 	.word	0x08002dcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
      break;
 8002db8:	e030      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d025      	beq.n	8002e12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dca:	e022      	b.n	8002e12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dd4:	d11f      	bne.n	8002e16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dda:	e01c      	b.n	8002e16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d903      	bls.n	8002dea <DMA_CheckFifoParam+0xb6>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d003      	beq.n	8002df0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002de8:	e018      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
      break;
 8002dee:	e015      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00e      	beq.n	8002e1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002e00:	e00b      	b.n	8002e1a <DMA_CheckFifoParam+0xe6>
      break;
 8002e02:	bf00      	nop
 8002e04:	e00a      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
      break;
 8002e06:	bf00      	nop
 8002e08:	e008      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
      break;
 8002e0a:	bf00      	nop
 8002e0c:	e006      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e004      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
      break;
 8002e12:	bf00      	nop
 8002e14:	e002      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
      break;   
 8002e16:	bf00      	nop
 8002e18:	e000      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
      break;
 8002e1a:	bf00      	nop
    }
  } 
  
  return status; 
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop

08002e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	e159      	b.n	80030fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	f040 8148 	bne.w	80030f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d005      	beq.n	8002e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d130      	bne.n	8002ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	2203      	movs	r2, #3
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 0201 	and.w	r2, r3, #1
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d017      	beq.n	8002f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d123      	bne.n	8002f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3208      	adds	r2, #8
 8002f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	08da      	lsrs	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3208      	adds	r2, #8
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0203 	and.w	r2, r3, #3
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80a2 	beq.w	80030f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4b57      	ldr	r3, [pc, #348]	; (8003114 <HAL_GPIO_Init+0x2e8>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	4a56      	ldr	r2, [pc, #344]	; (8003114 <HAL_GPIO_Init+0x2e8>)
 8002fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc2:	4b54      	ldr	r3, [pc, #336]	; (8003114 <HAL_GPIO_Init+0x2e8>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fce:	4a52      	ldr	r2, [pc, #328]	; (8003118 <HAL_GPIO_Init+0x2ec>)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a49      	ldr	r2, [pc, #292]	; (800311c <HAL_GPIO_Init+0x2f0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d019      	beq.n	800302e <HAL_GPIO_Init+0x202>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a48      	ldr	r2, [pc, #288]	; (8003120 <HAL_GPIO_Init+0x2f4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d013      	beq.n	800302a <HAL_GPIO_Init+0x1fe>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a47      	ldr	r2, [pc, #284]	; (8003124 <HAL_GPIO_Init+0x2f8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00d      	beq.n	8003026 <HAL_GPIO_Init+0x1fa>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a46      	ldr	r2, [pc, #280]	; (8003128 <HAL_GPIO_Init+0x2fc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d007      	beq.n	8003022 <HAL_GPIO_Init+0x1f6>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a45      	ldr	r2, [pc, #276]	; (800312c <HAL_GPIO_Init+0x300>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d101      	bne.n	800301e <HAL_GPIO_Init+0x1f2>
 800301a:	2304      	movs	r3, #4
 800301c:	e008      	b.n	8003030 <HAL_GPIO_Init+0x204>
 800301e:	2307      	movs	r3, #7
 8003020:	e006      	b.n	8003030 <HAL_GPIO_Init+0x204>
 8003022:	2303      	movs	r3, #3
 8003024:	e004      	b.n	8003030 <HAL_GPIO_Init+0x204>
 8003026:	2302      	movs	r3, #2
 8003028:	e002      	b.n	8003030 <HAL_GPIO_Init+0x204>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_GPIO_Init+0x204>
 800302e:	2300      	movs	r3, #0
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	f002 0203 	and.w	r2, r2, #3
 8003036:	0092      	lsls	r2, r2, #2
 8003038:	4093      	lsls	r3, r2
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003040:	4935      	ldr	r1, [pc, #212]	; (8003118 <HAL_GPIO_Init+0x2ec>)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	089b      	lsrs	r3, r3, #2
 8003046:	3302      	adds	r3, #2
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800304e:	4b38      	ldr	r3, [pc, #224]	; (8003130 <HAL_GPIO_Init+0x304>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003072:	4a2f      	ldr	r2, [pc, #188]	; (8003130 <HAL_GPIO_Init+0x304>)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003078:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <HAL_GPIO_Init+0x304>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800309c:	4a24      	ldr	r2, [pc, #144]	; (8003130 <HAL_GPIO_Init+0x304>)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030a2:	4b23      	ldr	r3, [pc, #140]	; (8003130 <HAL_GPIO_Init+0x304>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030c6:	4a1a      	ldr	r2, [pc, #104]	; (8003130 <HAL_GPIO_Init+0x304>)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030cc:	4b18      	ldr	r3, [pc, #96]	; (8003130 <HAL_GPIO_Init+0x304>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030f0:	4a0f      	ldr	r2, [pc, #60]	; (8003130 <HAL_GPIO_Init+0x304>)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3301      	adds	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2b0f      	cmp	r3, #15
 8003100:	f67f aea2 	bls.w	8002e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	3724      	adds	r7, #36	; 0x24
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800
 8003118:	40013800 	.word	0x40013800
 800311c:	40020000 	.word	0x40020000
 8003120:	40020400 	.word	0x40020400
 8003124:	40020800 	.word	0x40020800
 8003128:	40020c00 	.word	0x40020c00
 800312c:	40021000 	.word	0x40021000
 8003130:	40013c00 	.word	0x40013c00

08003134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]
 8003140:	4613      	mov	r3, r2
 8003142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003144:	787b      	ldrb	r3, [r7, #1]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800314a:	887a      	ldrh	r2, [r7, #2]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003150:	e003      	b.n	800315a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003152:	887b      	ldrh	r3, [r7, #2]
 8003154:	041a      	lsls	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	619a      	str	r2, [r3, #24]
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003178:	887a      	ldrh	r2, [r7, #2]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4013      	ands	r3, r2
 800317e:	041a      	lsls	r2, r3, #16
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	43d9      	mvns	r1, r3
 8003184:	887b      	ldrh	r3, [r7, #2]
 8003186:	400b      	ands	r3, r1
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	619a      	str	r2, [r3, #24]
}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e12b      	b.n	8003406 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fe fbf2 	bl	80019ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2224      	movs	r2, #36	; 0x24
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003200:	f000 fd40 	bl	8003c84 <HAL_RCC_GetPCLK1Freq>
 8003204:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4a81      	ldr	r2, [pc, #516]	; (8003410 <HAL_I2C_Init+0x274>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d807      	bhi.n	8003220 <HAL_I2C_Init+0x84>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a80      	ldr	r2, [pc, #512]	; (8003414 <HAL_I2C_Init+0x278>)
 8003214:	4293      	cmp	r3, r2
 8003216:	bf94      	ite	ls
 8003218:	2301      	movls	r3, #1
 800321a:	2300      	movhi	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e006      	b.n	800322e <HAL_I2C_Init+0x92>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4a7d      	ldr	r2, [pc, #500]	; (8003418 <HAL_I2C_Init+0x27c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	bf94      	ite	ls
 8003228:	2301      	movls	r3, #1
 800322a:	2300      	movhi	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e0e7      	b.n	8003406 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4a78      	ldr	r2, [pc, #480]	; (800341c <HAL_I2C_Init+0x280>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	0c9b      	lsrs	r3, r3, #18
 8003240:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4a6a      	ldr	r2, [pc, #424]	; (8003410 <HAL_I2C_Init+0x274>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d802      	bhi.n	8003270 <HAL_I2C_Init+0xd4>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	3301      	adds	r3, #1
 800326e:	e009      	b.n	8003284 <HAL_I2C_Init+0xe8>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	4a69      	ldr	r2, [pc, #420]	; (8003420 <HAL_I2C_Init+0x284>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	099b      	lsrs	r3, r3, #6
 8003282:	3301      	adds	r3, #1
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	430b      	orrs	r3, r1
 800328a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003296:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	495c      	ldr	r1, [pc, #368]	; (8003410 <HAL_I2C_Init+0x274>)
 80032a0:	428b      	cmp	r3, r1
 80032a2:	d819      	bhi.n	80032d8 <HAL_I2C_Init+0x13c>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1e59      	subs	r1, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b2:	1c59      	adds	r1, r3, #1
 80032b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032b8:	400b      	ands	r3, r1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <HAL_I2C_Init+0x138>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1e59      	subs	r1, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80032cc:	3301      	adds	r3, #1
 80032ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d2:	e051      	b.n	8003378 <HAL_I2C_Init+0x1dc>
 80032d4:	2304      	movs	r3, #4
 80032d6:	e04f      	b.n	8003378 <HAL_I2C_Init+0x1dc>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d111      	bne.n	8003304 <HAL_I2C_Init+0x168>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1e58      	subs	r0, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6859      	ldr	r1, [r3, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	440b      	add	r3, r1
 80032ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e012      	b.n	800332a <HAL_I2C_Init+0x18e>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1e58      	subs	r0, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	0099      	lsls	r1, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	fbb0 f3f3 	udiv	r3, r0, r3
 800331a:	3301      	adds	r3, #1
 800331c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Init+0x196>
 800332e:	2301      	movs	r3, #1
 8003330:	e022      	b.n	8003378 <HAL_I2C_Init+0x1dc>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10e      	bne.n	8003358 <HAL_I2C_Init+0x1bc>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1e58      	subs	r0, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6859      	ldr	r1, [r3, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	440b      	add	r3, r1
 8003348:	fbb0 f3f3 	udiv	r3, r0, r3
 800334c:	3301      	adds	r3, #1
 800334e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003356:	e00f      	b.n	8003378 <HAL_I2C_Init+0x1dc>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1e58      	subs	r0, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	0099      	lsls	r1, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	fbb0 f3f3 	udiv	r3, r0, r3
 800336e:	3301      	adds	r3, #1
 8003370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	6809      	ldr	r1, [r1, #0]
 800337c:	4313      	orrs	r3, r2
 800337e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6911      	ldr	r1, [r2, #16]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68d2      	ldr	r2, [r2, #12]
 80033b2:	4311      	orrs	r1, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	000186a0 	.word	0x000186a0
 8003414:	001e847f 	.word	0x001e847f
 8003418:	003d08ff 	.word	0x003d08ff
 800341c:	431bde83 	.word	0x431bde83
 8003420:	10624dd3 	.word	0x10624dd3

08003424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e267      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d075      	beq.n	800352e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003442:	4b88      	ldr	r3, [pc, #544]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b04      	cmp	r3, #4
 800344c:	d00c      	beq.n	8003468 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800344e:	4b85      	ldr	r3, [pc, #532]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003456:	2b08      	cmp	r3, #8
 8003458:	d112      	bne.n	8003480 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345a:	4b82      	ldr	r3, [pc, #520]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003466:	d10b      	bne.n	8003480 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003468:	4b7e      	ldr	r3, [pc, #504]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d05b      	beq.n	800352c <HAL_RCC_OscConfig+0x108>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d157      	bne.n	800352c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e242      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003488:	d106      	bne.n	8003498 <HAL_RCC_OscConfig+0x74>
 800348a:	4b76      	ldr	r3, [pc, #472]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a75      	ldr	r2, [pc, #468]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	e01d      	b.n	80034d4 <HAL_RCC_OscConfig+0xb0>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x98>
 80034a2:	4b70      	ldr	r3, [pc, #448]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a6f      	ldr	r2, [pc, #444]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	4b6d      	ldr	r3, [pc, #436]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6c      	ldr	r2, [pc, #432]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e00b      	b.n	80034d4 <HAL_RCC_OscConfig+0xb0>
 80034bc:	4b69      	ldr	r3, [pc, #420]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a68      	ldr	r2, [pc, #416]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	4b66      	ldr	r3, [pc, #408]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a65      	ldr	r2, [pc, #404]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d013      	beq.n	8003504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fe fc26 	bl	8001d2c <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e4:	f7fe fc22 	bl	8001d2c <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b64      	cmp	r3, #100	; 0x64
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e207      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	4b5b      	ldr	r3, [pc, #364]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0xc0>
 8003502:	e014      	b.n	800352e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fe fc12 	bl	8001d2c <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800350c:	f7fe fc0e 	bl	8001d2c <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	; 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e1f3      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351e:	4b51      	ldr	r3, [pc, #324]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0xe8>
 800352a:	e000      	b.n	800352e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d063      	beq.n	8003602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800353a:	4b4a      	ldr	r3, [pc, #296]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003546:	4b47      	ldr	r3, [pc, #284]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800354e:	2b08      	cmp	r3, #8
 8003550:	d11c      	bne.n	800358c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003552:	4b44      	ldr	r3, [pc, #272]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d116      	bne.n	800358c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355e:	4b41      	ldr	r3, [pc, #260]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <HAL_RCC_OscConfig+0x152>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e1c7      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003576:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4937      	ldr	r1, [pc, #220]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358a:	e03a      	b.n	8003602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d020      	beq.n	80035d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003594:	4b34      	ldr	r3, [pc, #208]	; (8003668 <HAL_RCC_OscConfig+0x244>)
 8003596:	2201      	movs	r2, #1
 8003598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359a:	f7fe fbc7 	bl	8001d2c <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a2:	f7fe fbc3 	bl	8001d2c <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e1a8      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b4:	4b2b      	ldr	r3, [pc, #172]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c0:	4b28      	ldr	r3, [pc, #160]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4925      	ldr	r1, [pc, #148]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	600b      	str	r3, [r1, #0]
 80035d4:	e015      	b.n	8003602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d6:	4b24      	ldr	r3, [pc, #144]	; (8003668 <HAL_RCC_OscConfig+0x244>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fe fba6 	bl	8001d2c <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e4:	f7fe fba2 	bl	8001d2c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e187      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f6:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d036      	beq.n	800367c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <HAL_RCC_OscConfig+0x248>)
 8003618:	2201      	movs	r2, #1
 800361a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fe fb86 	bl	8001d2c <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003624:	f7fe fb82 	bl	8001d2c <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e167      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003636:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x200>
 8003642:	e01b      	b.n	800367c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <HAL_RCC_OscConfig+0x248>)
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364a:	f7fe fb6f 	bl	8001d2c <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003650:	e00e      	b.n	8003670 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003652:	f7fe fb6b 	bl	8001d2c <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d907      	bls.n	8003670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e150      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
 8003664:	40023800 	.word	0x40023800
 8003668:	42470000 	.word	0x42470000
 800366c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003670:	4b88      	ldr	r3, [pc, #544]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1ea      	bne.n	8003652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8097 	beq.w	80037b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368a:	2300      	movs	r3, #0
 800368c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800368e:	4b81      	ldr	r3, [pc, #516]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10f      	bne.n	80036ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	4b7d      	ldr	r3, [pc, #500]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	4a7c      	ldr	r2, [pc, #496]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80036a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a8:	6413      	str	r3, [r2, #64]	; 0x40
 80036aa:	4b7a      	ldr	r3, [pc, #488]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b6:	2301      	movs	r3, #1
 80036b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ba:	4b77      	ldr	r3, [pc, #476]	; (8003898 <HAL_RCC_OscConfig+0x474>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d118      	bne.n	80036f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c6:	4b74      	ldr	r3, [pc, #464]	; (8003898 <HAL_RCC_OscConfig+0x474>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a73      	ldr	r2, [pc, #460]	; (8003898 <HAL_RCC_OscConfig+0x474>)
 80036cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d2:	f7fe fb2b 	bl	8001d2c <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036da:	f7fe fb27 	bl	8001d2c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e10c      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ec:	4b6a      	ldr	r3, [pc, #424]	; (8003898 <HAL_RCC_OscConfig+0x474>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d106      	bne.n	800370e <HAL_RCC_OscConfig+0x2ea>
 8003700:	4b64      	ldr	r3, [pc, #400]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	4a63      	ldr	r2, [pc, #396]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6713      	str	r3, [r2, #112]	; 0x70
 800370c:	e01c      	b.n	8003748 <HAL_RCC_OscConfig+0x324>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b05      	cmp	r3, #5
 8003714:	d10c      	bne.n	8003730 <HAL_RCC_OscConfig+0x30c>
 8003716:	4b5f      	ldr	r3, [pc, #380]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a5e      	ldr	r2, [pc, #376]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	6713      	str	r3, [r2, #112]	; 0x70
 8003722:	4b5c      	ldr	r3, [pc, #368]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	4a5b      	ldr	r2, [pc, #364]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6713      	str	r3, [r2, #112]	; 0x70
 800372e:	e00b      	b.n	8003748 <HAL_RCC_OscConfig+0x324>
 8003730:	4b58      	ldr	r3, [pc, #352]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	4a57      	ldr	r2, [pc, #348]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	6713      	str	r3, [r2, #112]	; 0x70
 800373c:	4b55      	ldr	r3, [pc, #340]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003740:	4a54      	ldr	r2, [pc, #336]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003742:	f023 0304 	bic.w	r3, r3, #4
 8003746:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d015      	beq.n	800377c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fe faec 	bl	8001d2c <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003756:	e00a      	b.n	800376e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003758:	f7fe fae8 	bl	8001d2c <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	; 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e0cb      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376e:	4b49      	ldr	r3, [pc, #292]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0ee      	beq.n	8003758 <HAL_RCC_OscConfig+0x334>
 800377a:	e014      	b.n	80037a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377c:	f7fe fad6 	bl	8001d2c <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003782:	e00a      	b.n	800379a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003784:	f7fe fad2 	bl	8001d2c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e0b5      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379a:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1ee      	bne.n	8003784 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d105      	bne.n	80037b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ac:	4b39      	ldr	r3, [pc, #228]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	4a38      	ldr	r2, [pc, #224]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80037b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80a1 	beq.w	8003904 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037c2:	4b34      	ldr	r3, [pc, #208]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d05c      	beq.n	8003888 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d141      	bne.n	800385a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d6:	4b31      	ldr	r3, [pc, #196]	; (800389c <HAL_RCC_OscConfig+0x478>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fe faa6 	bl	8001d2c <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fe faa2 	bl	8001d2c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e087      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f6:	4b27      	ldr	r3, [pc, #156]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	019b      	lsls	r3, r3, #6
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	3b01      	subs	r3, #1
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	491b      	ldr	r1, [pc, #108]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800382c:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_RCC_OscConfig+0x478>)
 800382e:	2201      	movs	r2, #1
 8003830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003832:	f7fe fa7b 	bl	8001d2c <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800383a:	f7fe fa77 	bl	8001d2c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e05c      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x416>
 8003858:	e054      	b.n	8003904 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385a:	4b10      	ldr	r3, [pc, #64]	; (800389c <HAL_RCC_OscConfig+0x478>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fe fa64 	bl	8001d2c <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003868:	f7fe fa60 	bl	8001d2c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e045      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x444>
 8003886:	e03d      	b.n	8003904 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e038      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
 8003894:	40023800 	.word	0x40023800
 8003898:	40007000 	.word	0x40007000
 800389c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <HAL_RCC_OscConfig+0x4ec>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d028      	beq.n	8003900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d121      	bne.n	8003900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d11a      	bne.n	8003900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038d0:	4013      	ands	r3, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038d8:	4293      	cmp	r3, r2
 80038da:	d111      	bne.n	8003900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	3b01      	subs	r3, #1
 80038ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d107      	bne.n	8003900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800

08003914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0cc      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003928:	4b68      	ldr	r3, [pc, #416]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d90c      	bls.n	8003950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b65      	ldr	r3, [pc, #404]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b63      	ldr	r3, [pc, #396]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0b8      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d020      	beq.n	800399e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003968:	4b59      	ldr	r3, [pc, #356]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	4a58      	ldr	r2, [pc, #352]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003980:	4b53      	ldr	r3, [pc, #332]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a52      	ldr	r2, [pc, #328]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800398a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800398c:	4b50      	ldr	r3, [pc, #320]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	494d      	ldr	r1, [pc, #308]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d044      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b47      	ldr	r3, [pc, #284]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d119      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e07f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d003      	beq.n	80039d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d2:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e06f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e2:	4b3b      	ldr	r3, [pc, #236]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e067      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f2:	4b37      	ldr	r3, [pc, #220]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f023 0203 	bic.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4934      	ldr	r1, [pc, #208]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a04:	f7fe f992 	bl	8001d2c <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a0c:	f7fe f98e 	bl	8001d2c <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e04f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 020c 	and.w	r2, r3, #12
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d1eb      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a34:	4b25      	ldr	r3, [pc, #148]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d20c      	bcs.n	8003a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b22      	ldr	r3, [pc, #136]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e032      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4916      	ldr	r1, [pc, #88]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	490e      	ldr	r1, [pc, #56]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a9a:	f000 f821 	bl	8003ae0 <HAL_RCC_GetSysClockFreq>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	490a      	ldr	r1, [pc, #40]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8003aac:	5ccb      	ldrb	r3, [r1, r3]
 8003aae:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab2:	4a09      	ldr	r2, [pc, #36]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe f8f2 	bl	8001ca4 <HAL_InitTick>

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023c00 	.word	0x40023c00
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	08004fd4 	.word	0x08004fd4
 8003ad8:	20000870 	.word	0x20000870
 8003adc:	20000874 	.word	0x20000874

08003ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae4:	b090      	sub	sp, #64	; 0x40
 8003ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	637b      	str	r3, [r7, #52]	; 0x34
 8003aec:	2300      	movs	r3, #0
 8003aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003af0:	2300      	movs	r3, #0
 8003af2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af8:	4b59      	ldr	r3, [pc, #356]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d00d      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x40>
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	f200 80a1 	bhi.w	8003c4c <HAL_RCC_GetSysClockFreq+0x16c>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x34>
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d003      	beq.n	8003b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b12:	e09b      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b14:	4b53      	ldr	r3, [pc, #332]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b16:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b18:	e09b      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b1a:	4b53      	ldr	r3, [pc, #332]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b1e:	e098      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b20:	4b4f      	ldr	r3, [pc, #316]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b28:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b2a:	4b4d      	ldr	r3, [pc, #308]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d028      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b36:	4b4a      	ldr	r3, [pc, #296]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	099b      	lsrs	r3, r3, #6
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	623b      	str	r3, [r7, #32]
 8003b40:	627a      	str	r2, [r7, #36]	; 0x24
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4b47      	ldr	r3, [pc, #284]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b4c:	fb03 f201 	mul.w	r2, r3, r1
 8003b50:	2300      	movs	r3, #0
 8003b52:	fb00 f303 	mul.w	r3, r0, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	4a43      	ldr	r2, [pc, #268]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b5a:	fba0 1202 	umull	r1, r2, r0, r2
 8003b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b60:	460a      	mov	r2, r1
 8003b62:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b66:	4413      	add	r3, r2
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	61bb      	str	r3, [r7, #24]
 8003b70:	61fa      	str	r2, [r7, #28]
 8003b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b7a:	f7fc fff3 	bl	8000b64 <__aeabi_uldivmod>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4613      	mov	r3, r2
 8003b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b86:	e053      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b88:	4b35      	ldr	r3, [pc, #212]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	099b      	lsrs	r3, r3, #6
 8003b8e:	2200      	movs	r2, #0
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	617a      	str	r2, [r7, #20]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b9a:	f04f 0b00 	mov.w	fp, #0
 8003b9e:	4652      	mov	r2, sl
 8003ba0:	465b      	mov	r3, fp
 8003ba2:	f04f 0000 	mov.w	r0, #0
 8003ba6:	f04f 0100 	mov.w	r1, #0
 8003baa:	0159      	lsls	r1, r3, #5
 8003bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb0:	0150      	lsls	r0, r2, #5
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	ebb2 080a 	subs.w	r8, r2, sl
 8003bba:	eb63 090b 	sbc.w	r9, r3, fp
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bd2:	ebb2 0408 	subs.w	r4, r2, r8
 8003bd6:	eb63 0509 	sbc.w	r5, r3, r9
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	00eb      	lsls	r3, r5, #3
 8003be4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be8:	00e2      	lsls	r2, r4, #3
 8003bea:	4614      	mov	r4, r2
 8003bec:	461d      	mov	r5, r3
 8003bee:	eb14 030a 	adds.w	r3, r4, sl
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	eb45 030b 	adc.w	r3, r5, fp
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c06:	4629      	mov	r1, r5
 8003c08:	028b      	lsls	r3, r1, #10
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c10:	4621      	mov	r1, r4
 8003c12:	028a      	lsls	r2, r1, #10
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	60fa      	str	r2, [r7, #12]
 8003c20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c24:	f7fc ff9e 	bl	8000b64 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c4a:	e002      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3740      	adds	r7, #64	; 0x40
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023800 	.word	0x40023800
 8003c64:	00f42400 	.word	0x00f42400
 8003c68:	017d7840 	.word	0x017d7840

08003c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c70:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c72:	681b      	ldr	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	20000870 	.word	0x20000870

08003c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c88:	f7ff fff0 	bl	8003c6c <HAL_RCC_GetHCLKFreq>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	0a9b      	lsrs	r3, r3, #10
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	4903      	ldr	r1, [pc, #12]	; (8003ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c9a:	5ccb      	ldrb	r3, [r1, r3]
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	08004fe4 	.word	0x08004fe4

08003cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e041      	b.n	8003d42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fd feb2 	bl	8001a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4610      	mov	r0, r2
 8003cec:	f000 fc82 	bl	80045f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d001      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e044      	b.n	8003dee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1e      	ldr	r2, [pc, #120]	; (8003dfc <HAL_TIM_Base_Start_IT+0xb0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d018      	beq.n	8003db8 <HAL_TIM_Base_Start_IT+0x6c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8e:	d013      	beq.n	8003db8 <HAL_TIM_Base_Start_IT+0x6c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1a      	ldr	r2, [pc, #104]	; (8003e00 <HAL_TIM_Base_Start_IT+0xb4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00e      	beq.n	8003db8 <HAL_TIM_Base_Start_IT+0x6c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <HAL_TIM_Base_Start_IT+0xb8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d009      	beq.n	8003db8 <HAL_TIM_Base_Start_IT+0x6c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <HAL_TIM_Base_Start_IT+0xbc>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d004      	beq.n	8003db8 <HAL_TIM_Base_Start_IT+0x6c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a16      	ldr	r2, [pc, #88]	; (8003e0c <HAL_TIM_Base_Start_IT+0xc0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d111      	bne.n	8003ddc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b06      	cmp	r3, #6
 8003dc8:	d010      	beq.n	8003dec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f042 0201 	orr.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dda:	e007      	b.n	8003dec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40010000 	.word	0x40010000
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40000800 	.word	0x40000800
 8003e08:	40000c00 	.word	0x40000c00
 8003e0c:	40014000 	.word	0x40014000

08003e10 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0201 	bic.w	r2, r2, #1
 8003e26:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6a1a      	ldr	r2, [r3, #32]
 8003e2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10f      	bne.n	8003e58 <HAL_TIM_Base_Stop_IT+0x48>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6a1a      	ldr	r2, [r3, #32]
 8003e3e:	f240 4344 	movw	r3, #1092	; 0x444
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d107      	bne.n	8003e58 <HAL_TIM_Base_Stop_IT+0x48>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e041      	b.n	8003f04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d106      	bne.n	8003e9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f839 	bl	8003f0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f000 fba1 	bl	80045f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d109      	bne.n	8003f44 <HAL_TIM_PWM_Start+0x24>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	bf14      	ite	ne
 8003f3c:	2301      	movne	r3, #1
 8003f3e:	2300      	moveq	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	e022      	b.n	8003f8a <HAL_TIM_PWM_Start+0x6a>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d109      	bne.n	8003f5e <HAL_TIM_PWM_Start+0x3e>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	bf14      	ite	ne
 8003f56:	2301      	movne	r3, #1
 8003f58:	2300      	moveq	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	e015      	b.n	8003f8a <HAL_TIM_PWM_Start+0x6a>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d109      	bne.n	8003f78 <HAL_TIM_PWM_Start+0x58>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	bf14      	ite	ne
 8003f70:	2301      	movne	r3, #1
 8003f72:	2300      	moveq	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	e008      	b.n	8003f8a <HAL_TIM_PWM_Start+0x6a>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e068      	b.n	8004064 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d104      	bne.n	8003fa2 <HAL_TIM_PWM_Start+0x82>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa0:	e013      	b.n	8003fca <HAL_TIM_PWM_Start+0xaa>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d104      	bne.n	8003fb2 <HAL_TIM_PWM_Start+0x92>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fb0:	e00b      	b.n	8003fca <HAL_TIM_PWM_Start+0xaa>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d104      	bne.n	8003fc2 <HAL_TIM_PWM_Start+0xa2>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc0:	e003      	b.n	8003fca <HAL_TIM_PWM_Start+0xaa>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	6839      	ldr	r1, [r7, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fdb4 	bl	8004b40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a23      	ldr	r2, [pc, #140]	; (800406c <HAL_TIM_PWM_Start+0x14c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d107      	bne.n	8003ff2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ff0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1d      	ldr	r2, [pc, #116]	; (800406c <HAL_TIM_PWM_Start+0x14c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d018      	beq.n	800402e <HAL_TIM_PWM_Start+0x10e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004004:	d013      	beq.n	800402e <HAL_TIM_PWM_Start+0x10e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a19      	ldr	r2, [pc, #100]	; (8004070 <HAL_TIM_PWM_Start+0x150>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00e      	beq.n	800402e <HAL_TIM_PWM_Start+0x10e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a17      	ldr	r2, [pc, #92]	; (8004074 <HAL_TIM_PWM_Start+0x154>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_TIM_PWM_Start+0x10e>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a16      	ldr	r2, [pc, #88]	; (8004078 <HAL_TIM_PWM_Start+0x158>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_TIM_PWM_Start+0x10e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a14      	ldr	r2, [pc, #80]	; (800407c <HAL_TIM_PWM_Start+0x15c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d111      	bne.n	8004052 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b06      	cmp	r3, #6
 800403e:	d010      	beq.n	8004062 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004050:	e007      	b.n	8004062 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0201 	orr.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40010000 	.word	0x40010000
 8004070:	40000400 	.word	0x40000400
 8004074:	40000800 	.word	0x40000800
 8004078:	40000c00 	.word	0x40000c00
 800407c:	40014000 	.word	0x40014000

08004080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b02      	cmp	r3, #2
 8004094:	d122      	bne.n	80040dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d11b      	bne.n	80040dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0202 	mvn.w	r2, #2
 80040ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fa77 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fa69 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fa7a 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d122      	bne.n	8004130 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d11b      	bne.n	8004130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0204 	mvn.w	r2, #4
 8004100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2202      	movs	r2, #2
 8004106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fa4d 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fa3f 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fa50 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b08      	cmp	r3, #8
 800413c:	d122      	bne.n	8004184 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b08      	cmp	r3, #8
 800414a:	d11b      	bne.n	8004184 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0208 	mvn.w	r2, #8
 8004154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2204      	movs	r2, #4
 800415a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fa23 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fa15 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fa26 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b10      	cmp	r3, #16
 8004190:	d122      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b10      	cmp	r3, #16
 800419e:	d11b      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0210 	mvn.w	r2, #16
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2208      	movs	r2, #8
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f9f9 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f9eb 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f9fc 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d10e      	bne.n	8004204 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d107      	bne.n	8004204 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0201 	mvn.w	r2, #1
 80041fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fc fee0 	bl	8000fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	2b80      	cmp	r3, #128	; 0x80
 8004210:	d10e      	bne.n	8004230 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	2b80      	cmp	r3, #128	; 0x80
 800421e:	d107      	bne.n	8004230 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fe24 	bl	8004e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d10e      	bne.n	800425c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004248:	2b40      	cmp	r3, #64	; 0x40
 800424a:	d107      	bne.n	800425c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f9c1 	bl	80045de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b20      	cmp	r3, #32
 8004268:	d10e      	bne.n	8004288 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b20      	cmp	r3, #32
 8004276:	d107      	bne.n	8004288 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0220 	mvn.w	r2, #32
 8004280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fdee 	bl	8004e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e0ae      	b.n	800440c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b0c      	cmp	r3, #12
 80042ba:	f200 809f 	bhi.w	80043fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80042be:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c4:	080042f9 	.word	0x080042f9
 80042c8:	080043fd 	.word	0x080043fd
 80042cc:	080043fd 	.word	0x080043fd
 80042d0:	080043fd 	.word	0x080043fd
 80042d4:	08004339 	.word	0x08004339
 80042d8:	080043fd 	.word	0x080043fd
 80042dc:	080043fd 	.word	0x080043fd
 80042e0:	080043fd 	.word	0x080043fd
 80042e4:	0800437b 	.word	0x0800437b
 80042e8:	080043fd 	.word	0x080043fd
 80042ec:	080043fd 	.word	0x080043fd
 80042f0:	080043fd 	.word	0x080043fd
 80042f4:	080043bb 	.word	0x080043bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 f9f8 	bl	80046f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699a      	ldr	r2, [r3, #24]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0208 	orr.w	r2, r2, #8
 8004312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0204 	bic.w	r2, r2, #4
 8004322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6999      	ldr	r1, [r3, #24]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	619a      	str	r2, [r3, #24]
      break;
 8004336:	e064      	b.n	8004402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fa3e 	bl	80047c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699a      	ldr	r2, [r3, #24]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699a      	ldr	r2, [r3, #24]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6999      	ldr	r1, [r3, #24]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	021a      	lsls	r2, r3, #8
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	619a      	str	r2, [r3, #24]
      break;
 8004378:	e043      	b.n	8004402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fa89 	bl	8004898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0208 	orr.w	r2, r2, #8
 8004394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69da      	ldr	r2, [r3, #28]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0204 	bic.w	r2, r2, #4
 80043a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69d9      	ldr	r1, [r3, #28]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	61da      	str	r2, [r3, #28]
      break;
 80043b8:	e023      	b.n	8004402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fad3 	bl	800496c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69da      	ldr	r2, [r3, #28]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69d9      	ldr	r1, [r3, #28]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	021a      	lsls	r2, r3, #8
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	61da      	str	r2, [r3, #28]
      break;
 80043fa:	e002      	b.n	8004402 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800440a:	7dfb      	ldrb	r3, [r7, #23]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_TIM_ConfigClockSource+0x1c>
 800442c:	2302      	movs	r3, #2
 800442e:	e0b4      	b.n	800459a <HAL_TIM_ConfigClockSource+0x186>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800444e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004468:	d03e      	beq.n	80044e8 <HAL_TIM_ConfigClockSource+0xd4>
 800446a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446e:	f200 8087 	bhi.w	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004476:	f000 8086 	beq.w	8004586 <HAL_TIM_ConfigClockSource+0x172>
 800447a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447e:	d87f      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004480:	2b70      	cmp	r3, #112	; 0x70
 8004482:	d01a      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0xa6>
 8004484:	2b70      	cmp	r3, #112	; 0x70
 8004486:	d87b      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004488:	2b60      	cmp	r3, #96	; 0x60
 800448a:	d050      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x11a>
 800448c:	2b60      	cmp	r3, #96	; 0x60
 800448e:	d877      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004490:	2b50      	cmp	r3, #80	; 0x50
 8004492:	d03c      	beq.n	800450e <HAL_TIM_ConfigClockSource+0xfa>
 8004494:	2b50      	cmp	r3, #80	; 0x50
 8004496:	d873      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	d058      	beq.n	800454e <HAL_TIM_ConfigClockSource+0x13a>
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d86f      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 80044a0:	2b30      	cmp	r3, #48	; 0x30
 80044a2:	d064      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15a>
 80044a4:	2b30      	cmp	r3, #48	; 0x30
 80044a6:	d86b      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d060      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15a>
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d867      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d05c      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15a>
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d05a      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15a>
 80044b8:	e062      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6899      	ldr	r1, [r3, #8]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f000 fb19 	bl	8004b00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	609a      	str	r2, [r3, #8]
      break;
 80044e6:	e04f      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6899      	ldr	r1, [r3, #8]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f000 fb02 	bl	8004b00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800450a:	609a      	str	r2, [r3, #8]
      break;
 800450c:	e03c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6859      	ldr	r1, [r3, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	461a      	mov	r2, r3
 800451c:	f000 fa76 	bl	8004a0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2150      	movs	r1, #80	; 0x50
 8004526:	4618      	mov	r0, r3
 8004528:	f000 facf 	bl	8004aca <TIM_ITRx_SetConfig>
      break;
 800452c:	e02c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6859      	ldr	r1, [r3, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	461a      	mov	r2, r3
 800453c:	f000 fa95 	bl	8004a6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2160      	movs	r1, #96	; 0x60
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fabf 	bl	8004aca <TIM_ITRx_SetConfig>
      break;
 800454c:	e01c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6859      	ldr	r1, [r3, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	461a      	mov	r2, r3
 800455c:	f000 fa56 	bl	8004a0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2140      	movs	r1, #64	; 0x40
 8004566:	4618      	mov	r0, r3
 8004568:	f000 faaf 	bl	8004aca <TIM_ITRx_SetConfig>
      break;
 800456c:	e00c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f000 faa6 	bl	8004aca <TIM_ITRx_SetConfig>
      break;
 800457e:	e003      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
      break;
 8004584:	e000      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a34      	ldr	r2, [pc, #208]	; (80046d8 <TIM_Base_SetConfig+0xe4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00f      	beq.n	800462c <TIM_Base_SetConfig+0x38>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004612:	d00b      	beq.n	800462c <TIM_Base_SetConfig+0x38>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a31      	ldr	r2, [pc, #196]	; (80046dc <TIM_Base_SetConfig+0xe8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d007      	beq.n	800462c <TIM_Base_SetConfig+0x38>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a30      	ldr	r2, [pc, #192]	; (80046e0 <TIM_Base_SetConfig+0xec>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d003      	beq.n	800462c <TIM_Base_SetConfig+0x38>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a2f      	ldr	r2, [pc, #188]	; (80046e4 <TIM_Base_SetConfig+0xf0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d108      	bne.n	800463e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a25      	ldr	r2, [pc, #148]	; (80046d8 <TIM_Base_SetConfig+0xe4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d01b      	beq.n	800467e <TIM_Base_SetConfig+0x8a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464c:	d017      	beq.n	800467e <TIM_Base_SetConfig+0x8a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a22      	ldr	r2, [pc, #136]	; (80046dc <TIM_Base_SetConfig+0xe8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <TIM_Base_SetConfig+0x8a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a21      	ldr	r2, [pc, #132]	; (80046e0 <TIM_Base_SetConfig+0xec>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00f      	beq.n	800467e <TIM_Base_SetConfig+0x8a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a20      	ldr	r2, [pc, #128]	; (80046e4 <TIM_Base_SetConfig+0xf0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00b      	beq.n	800467e <TIM_Base_SetConfig+0x8a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a1f      	ldr	r2, [pc, #124]	; (80046e8 <TIM_Base_SetConfig+0xf4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d007      	beq.n	800467e <TIM_Base_SetConfig+0x8a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a1e      	ldr	r2, [pc, #120]	; (80046ec <TIM_Base_SetConfig+0xf8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d003      	beq.n	800467e <TIM_Base_SetConfig+0x8a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a1d      	ldr	r2, [pc, #116]	; (80046f0 <TIM_Base_SetConfig+0xfc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d108      	bne.n	8004690 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <TIM_Base_SetConfig+0xe4>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d103      	bne.n	80046c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	615a      	str	r2, [r3, #20]
}
 80046ca:	bf00      	nop
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40000800 	.word	0x40000800
 80046e4:	40000c00 	.word	0x40000c00
 80046e8:	40014000 	.word	0x40014000
 80046ec:	40014400 	.word	0x40014400
 80046f0:	40014800 	.word	0x40014800

080046f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f023 0201 	bic.w	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0303 	bic.w	r3, r3, #3
 800472a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f023 0302 	bic.w	r3, r3, #2
 800473c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a1c      	ldr	r2, [pc, #112]	; (80047bc <TIM_OC1_SetConfig+0xc8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d10c      	bne.n	800476a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 0308 	bic.w	r3, r3, #8
 8004756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f023 0304 	bic.w	r3, r3, #4
 8004768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a13      	ldr	r2, [pc, #76]	; (80047bc <TIM_OC1_SetConfig+0xc8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d111      	bne.n	8004796 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	621a      	str	r2, [r3, #32]
}
 80047b0:	bf00      	nop
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	40010000 	.word	0x40010000

080047c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f023 0210 	bic.w	r2, r3, #16
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4313      	orrs	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f023 0320 	bic.w	r3, r3, #32
 800480a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a1e      	ldr	r2, [pc, #120]	; (8004894 <TIM_OC2_SetConfig+0xd4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d10d      	bne.n	800483c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800483a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a15      	ldr	r2, [pc, #84]	; (8004894 <TIM_OC2_SetConfig+0xd4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d113      	bne.n	800486c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800484a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40010000 	.word	0x40010000

08004898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0303 	bic.w	r3, r3, #3
 80048ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	021b      	lsls	r3, r3, #8
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <TIM_OC3_SetConfig+0xd0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d10d      	bne.n	8004912 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a14      	ldr	r2, [pc, #80]	; (8004968 <TIM_OC3_SetConfig+0xd0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d113      	bne.n	8004942 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4313      	orrs	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	621a      	str	r2, [r3, #32]
}
 800495c:	bf00      	nop
 800495e:	371c      	adds	r7, #28
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	40010000 	.word	0x40010000

0800496c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800499a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	021b      	lsls	r3, r3, #8
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	031b      	lsls	r3, r3, #12
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a10      	ldr	r2, [pc, #64]	; (8004a08 <TIM_OC4_SetConfig+0x9c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d109      	bne.n	80049e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	019b      	lsls	r3, r3, #6
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	621a      	str	r2, [r3, #32]
}
 80049fa:	bf00      	nop
 80049fc:	371c      	adds	r7, #28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	40010000 	.word	0x40010000

08004a0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f023 0201 	bic.w	r2, r3, #1
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f023 030a 	bic.w	r3, r3, #10
 8004a48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	621a      	str	r2, [r3, #32]
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b087      	sub	sp, #28
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	f023 0210 	bic.w	r2, r3, #16
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	031b      	lsls	r3, r3, #12
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aa6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	621a      	str	r2, [r3, #32]
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f043 0307 	orr.w	r3, r3, #7
 8004aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	609a      	str	r2, [r3, #8]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	021a      	lsls	r2, r3, #8
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	609a      	str	r2, [r3, #8]
}
 8004b34:	bf00      	nop
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 031f 	and.w	r3, r3, #31
 8004b52:	2201      	movs	r2, #1
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a1a      	ldr	r2, [r3, #32]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	43db      	mvns	r3, r3
 8004b62:	401a      	ands	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a1a      	ldr	r2, [r3, #32]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 031f 	and.w	r3, r3, #31
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	fa01 f303 	lsl.w	r3, r1, r3
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d109      	bne.n	8004bb0 <HAL_TIMEx_PWMN_Start+0x24>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e022      	b.n	8004bf6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d109      	bne.n	8004bca <HAL_TIMEx_PWMN_Start+0x3e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	bf14      	ite	ne
 8004bc2:	2301      	movne	r3, #1
 8004bc4:	2300      	moveq	r3, #0
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	e015      	b.n	8004bf6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d109      	bne.n	8004be4 <HAL_TIMEx_PWMN_Start+0x58>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	bf14      	ite	ne
 8004bdc:	2301      	movne	r3, #1
 8004bde:	2300      	moveq	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	e008      	b.n	8004bf6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	bf14      	ite	ne
 8004bf0:	2301      	movne	r3, #1
 8004bf2:	2300      	moveq	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e063      	b.n	8004cc6 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d104      	bne.n	8004c0e <HAL_TIMEx_PWMN_Start+0x82>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c0c:	e013      	b.n	8004c36 <HAL_TIMEx_PWMN_Start+0xaa>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d104      	bne.n	8004c1e <HAL_TIMEx_PWMN_Start+0x92>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c1c:	e00b      	b.n	8004c36 <HAL_TIMEx_PWMN_Start+0xaa>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d104      	bne.n	8004c2e <HAL_TIMEx_PWMN_Start+0xa2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c2c:	e003      	b.n	8004c36 <HAL_TIMEx_PWMN_Start+0xaa>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	6839      	ldr	r1, [r7, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 f924 	bl	8004e8c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c52:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a1d      	ldr	r2, [pc, #116]	; (8004cd0 <HAL_TIMEx_PWMN_Start+0x144>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d018      	beq.n	8004c90 <HAL_TIMEx_PWMN_Start+0x104>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c66:	d013      	beq.n	8004c90 <HAL_TIMEx_PWMN_Start+0x104>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a19      	ldr	r2, [pc, #100]	; (8004cd4 <HAL_TIMEx_PWMN_Start+0x148>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00e      	beq.n	8004c90 <HAL_TIMEx_PWMN_Start+0x104>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a18      	ldr	r2, [pc, #96]	; (8004cd8 <HAL_TIMEx_PWMN_Start+0x14c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d009      	beq.n	8004c90 <HAL_TIMEx_PWMN_Start+0x104>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a16      	ldr	r2, [pc, #88]	; (8004cdc <HAL_TIMEx_PWMN_Start+0x150>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d004      	beq.n	8004c90 <HAL_TIMEx_PWMN_Start+0x104>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a15      	ldr	r2, [pc, #84]	; (8004ce0 <HAL_TIMEx_PWMN_Start+0x154>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d111      	bne.n	8004cb4 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b06      	cmp	r3, #6
 8004ca0:	d010      	beq.n	8004cc4 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0201 	orr.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb2:	e007      	b.n	8004cc4 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40010000 	.word	0x40010000
 8004cd4:	40000400 	.word	0x40000400
 8004cd8:	40000800 	.word	0x40000800
 8004cdc:	40000c00 	.word	0x40000c00
 8004ce0:	40014000 	.word	0x40014000

08004ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e050      	b.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d018      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d48:	d013      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a18      	ldr	r2, [pc, #96]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00e      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a16      	ldr	r2, [pc, #88]	; (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d009      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a15      	ldr	r2, [pc, #84]	; (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d004      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a13      	ldr	r2, [pc, #76]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d10c      	bne.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40010000 	.word	0x40010000
 8004db0:	40000400 	.word	0x40000400
 8004db4:	40000800 	.word	0x40000800
 8004db8:	40000c00 	.word	0x40000c00
 8004dbc:	40014000 	.word	0x40014000

08004dc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e03d      	b.n	8004e58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f003 031f 	and.w	r3, r3, #31
 8004e9e:	2204      	movs	r2, #4
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	401a      	ands	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a1a      	ldr	r2, [r3, #32]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
	...

08004ed8 <__libc_init_array>:
 8004ed8:	b570      	push	{r4, r5, r6, lr}
 8004eda:	4d0d      	ldr	r5, [pc, #52]	; (8004f10 <__libc_init_array+0x38>)
 8004edc:	4c0d      	ldr	r4, [pc, #52]	; (8004f14 <__libc_init_array+0x3c>)
 8004ede:	1b64      	subs	r4, r4, r5
 8004ee0:	10a4      	asrs	r4, r4, #2
 8004ee2:	2600      	movs	r6, #0
 8004ee4:	42a6      	cmp	r6, r4
 8004ee6:	d109      	bne.n	8004efc <__libc_init_array+0x24>
 8004ee8:	4d0b      	ldr	r5, [pc, #44]	; (8004f18 <__libc_init_array+0x40>)
 8004eea:	4c0c      	ldr	r4, [pc, #48]	; (8004f1c <__libc_init_array+0x44>)
 8004eec:	f000 f866 	bl	8004fbc <_init>
 8004ef0:	1b64      	subs	r4, r4, r5
 8004ef2:	10a4      	asrs	r4, r4, #2
 8004ef4:	2600      	movs	r6, #0
 8004ef6:	42a6      	cmp	r6, r4
 8004ef8:	d105      	bne.n	8004f06 <__libc_init_array+0x2e>
 8004efa:	bd70      	pop	{r4, r5, r6, pc}
 8004efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f00:	4798      	blx	r3
 8004f02:	3601      	adds	r6, #1
 8004f04:	e7ee      	b.n	8004ee4 <__libc_init_array+0xc>
 8004f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f0a:	4798      	blx	r3
 8004f0c:	3601      	adds	r6, #1
 8004f0e:	e7f2      	b.n	8004ef6 <__libc_init_array+0x1e>
 8004f10:	08004ffc 	.word	0x08004ffc
 8004f14:	08004ffc 	.word	0x08004ffc
 8004f18:	08004ffc 	.word	0x08004ffc
 8004f1c:	08005000 	.word	0x08005000

08004f20 <memset>:
 8004f20:	4402      	add	r2, r0
 8004f22:	4603      	mov	r3, r0
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d100      	bne.n	8004f2a <memset+0xa>
 8004f28:	4770      	bx	lr
 8004f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f2e:	e7f9      	b.n	8004f24 <memset+0x4>

08004f30 <round>:
 8004f30:	ec51 0b10 	vmov	r0, r1, d0
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8004f3a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8004f3e:	2c13      	cmp	r4, #19
 8004f40:	ee10 2a10 	vmov	r2, s0
 8004f44:	460b      	mov	r3, r1
 8004f46:	dc19      	bgt.n	8004f7c <round+0x4c>
 8004f48:	2c00      	cmp	r4, #0
 8004f4a:	da09      	bge.n	8004f60 <round+0x30>
 8004f4c:	3401      	adds	r4, #1
 8004f4e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004f52:	d103      	bne.n	8004f5c <round+0x2c>
 8004f54:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004f58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	e028      	b.n	8004fb2 <round+0x82>
 8004f60:	4d15      	ldr	r5, [pc, #84]	; (8004fb8 <round+0x88>)
 8004f62:	4125      	asrs	r5, r4
 8004f64:	ea01 0605 	and.w	r6, r1, r5
 8004f68:	4332      	orrs	r2, r6
 8004f6a:	d00e      	beq.n	8004f8a <round+0x5a>
 8004f6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004f70:	fa42 f404 	asr.w	r4, r2, r4
 8004f74:	4423      	add	r3, r4
 8004f76:	ea23 0305 	bic.w	r3, r3, r5
 8004f7a:	e7ef      	b.n	8004f5c <round+0x2c>
 8004f7c:	2c33      	cmp	r4, #51	; 0x33
 8004f7e:	dd07      	ble.n	8004f90 <round+0x60>
 8004f80:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004f84:	d101      	bne.n	8004f8a <round+0x5a>
 8004f86:	f7fb f92d 	bl	80001e4 <__adddf3>
 8004f8a:	ec41 0b10 	vmov	d0, r0, r1
 8004f8e:	bd70      	pop	{r4, r5, r6, pc}
 8004f90:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8004f94:	f04f 35ff 	mov.w	r5, #4294967295
 8004f98:	40f5      	lsrs	r5, r6
 8004f9a:	4228      	tst	r0, r5
 8004f9c:	d0f5      	beq.n	8004f8a <round+0x5a>
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8004fa4:	fa01 f404 	lsl.w	r4, r1, r4
 8004fa8:	1912      	adds	r2, r2, r4
 8004faa:	bf28      	it	cs
 8004fac:	185b      	addcs	r3, r3, r1
 8004fae:	ea22 0205 	bic.w	r2, r2, r5
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	e7e8      	b.n	8004f8a <round+0x5a>
 8004fb8:	000fffff 	.word	0x000fffff

08004fbc <_init>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr

08004fc8 <_fini>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr
