
SPWM_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e48  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010f0  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050d0  080050d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080050d0  080050d0  000150d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050d8  080050d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d8  080050d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050dc  080050dc  000150dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080050e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  080050ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080050ec  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7e4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d1  00000000  00000000  0002a820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002bff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  0002ca58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016272  00000000  00000000  0002d400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0db  00000000  00000000  00043672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092798  00000000  00000000  0004e74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0ee5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d4c  00000000  00000000  000e0f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003fc8 	.word	0x08003fc8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003fc8 	.word	0x08003fc8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b974 	b.w	8000e24 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b58:	9d08      	ldr	r5, [sp, #32]
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	468e      	mov	lr, r1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d14d      	bne.n	8000bfe <__udivmoddi4+0xaa>
 8000b62:	428a      	cmp	r2, r1
 8000b64:	4694      	mov	ip, r2
 8000b66:	d969      	bls.n	8000c3c <__udivmoddi4+0xe8>
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	b152      	cbz	r2, 8000b84 <__udivmoddi4+0x30>
 8000b6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b72:	f1c2 0120 	rsb	r1, r2, #32
 8000b76:	fa20 f101 	lsr.w	r1, r0, r1
 8000b7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b82:	4094      	lsls	r4, r2
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	0c21      	lsrs	r1, r4, #16
 8000b8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b8e:	fa1f f78c 	uxth.w	r7, ip
 8000b92:	fb08 e316 	mls	r3, r8, r6, lr
 8000b96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b9a:	fb06 f107 	mul.w	r1, r6, r7
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	d90a      	bls.n	8000bb8 <__udivmoddi4+0x64>
 8000ba2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000baa:	f080 811f 	bcs.w	8000dec <__udivmoddi4+0x298>
 8000bae:	4299      	cmp	r1, r3
 8000bb0:	f240 811c 	bls.w	8000dec <__udivmoddi4+0x298>
 8000bb4:	3e02      	subs	r6, #2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	1a5b      	subs	r3, r3, r1
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc8:	fb00 f707 	mul.w	r7, r0, r7
 8000bcc:	42a7      	cmp	r7, r4
 8000bce:	d90a      	bls.n	8000be6 <__udivmoddi4+0x92>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd8:	f080 810a 	bcs.w	8000df0 <__udivmoddi4+0x29c>
 8000bdc:	42a7      	cmp	r7, r4
 8000bde:	f240 8107 	bls.w	8000df0 <__udivmoddi4+0x29c>
 8000be2:	4464      	add	r4, ip
 8000be4:	3802      	subs	r0, #2
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	1be4      	subs	r4, r4, r7
 8000bec:	2600      	movs	r6, #0
 8000bee:	b11d      	cbz	r5, 8000bf8 <__udivmoddi4+0xa4>
 8000bf0:	40d4      	lsrs	r4, r2
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0xc2>
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	f000 80ef 	beq.w	8000de6 <__udivmoddi4+0x292>
 8000c08:	2600      	movs	r6, #0
 8000c0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c0e:	4630      	mov	r0, r6
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	fab3 f683 	clz	r6, r3
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d14a      	bne.n	8000cb4 <__udivmoddi4+0x160>
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xd4>
 8000c22:	4282      	cmp	r2, r0
 8000c24:	f200 80f9 	bhi.w	8000e1a <__udivmoddi4+0x2c6>
 8000c28:	1a84      	subs	r4, r0, r2
 8000c2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	469e      	mov	lr, r3
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	d0e0      	beq.n	8000bf8 <__udivmoddi4+0xa4>
 8000c36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c3a:	e7dd      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c3c:	b902      	cbnz	r2, 8000c40 <__udivmoddi4+0xec>
 8000c3e:	deff      	udf	#255	; 0xff
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	f040 8092 	bne.w	8000d6e <__udivmoddi4+0x21a>
 8000c4a:	eba1 010c 	sub.w	r1, r1, ip
 8000c4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c52:	fa1f fe8c 	uxth.w	lr, ip
 8000c56:	2601      	movs	r6, #1
 8000c58:	0c20      	lsrs	r0, r4, #16
 8000c5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c66:	fb0e f003 	mul.w	r0, lr, r3
 8000c6a:	4288      	cmp	r0, r1
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x12c>
 8000c6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x12a>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f200 80cb 	bhi.w	8000e14 <__udivmoddi4+0x2c0>
 8000c7e:	4643      	mov	r3, r8
 8000c80:	1a09      	subs	r1, r1, r0
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c88:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c90:	fb0e fe00 	mul.w	lr, lr, r0
 8000c94:	45a6      	cmp	lr, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x156>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca0:	d202      	bcs.n	8000ca8 <__udivmoddi4+0x154>
 8000ca2:	45a6      	cmp	lr, r4
 8000ca4:	f200 80bb 	bhi.w	8000e1e <__udivmoddi4+0x2ca>
 8000ca8:	4608      	mov	r0, r1
 8000caa:	eba4 040e 	sub.w	r4, r4, lr
 8000cae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cb2:	e79c      	b.n	8000bee <__udivmoddi4+0x9a>
 8000cb4:	f1c6 0720 	rsb	r7, r6, #32
 8000cb8:	40b3      	lsls	r3, r6
 8000cba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cc2:	fa20 f407 	lsr.w	r4, r0, r7
 8000cc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cca:	431c      	orrs	r4, r3
 8000ccc:	40f9      	lsrs	r1, r7
 8000cce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cd2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cd6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cda:	0c20      	lsrs	r0, r4, #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ce4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cec:	4288      	cmp	r0, r1
 8000cee:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b8>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cfc:	f080 8088 	bcs.w	8000e10 <__udivmoddi4+0x2bc>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f240 8085 	bls.w	8000e10 <__udivmoddi4+0x2bc>
 8000d06:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0a:	4461      	add	r1, ip
 8000d0c:	1a09      	subs	r1, r1, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d14:	fb09 1110 	mls	r1, r9, r0, r1
 8000d18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d20:	458e      	cmp	lr, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1e2>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2c:	d26c      	bcs.n	8000e08 <__udivmoddi4+0x2b4>
 8000d2e:	458e      	cmp	lr, r1
 8000d30:	d96a      	bls.n	8000e08 <__udivmoddi4+0x2b4>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d3e:	eba1 010e 	sub.w	r1, r1, lr
 8000d42:	42a1      	cmp	r1, r4
 8000d44:	46c8      	mov	r8, r9
 8000d46:	46a6      	mov	lr, r4
 8000d48:	d356      	bcc.n	8000df8 <__udivmoddi4+0x2a4>
 8000d4a:	d053      	beq.n	8000df4 <__udivmoddi4+0x2a0>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x212>
 8000d4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d52:	eb61 010e 	sbc.w	r1, r1, lr
 8000d56:	fa01 f707 	lsl.w	r7, r1, r7
 8000d5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d5e:	40f1      	lsrs	r1, r6
 8000d60:	431f      	orrs	r7, r3
 8000d62:	e9c5 7100 	strd	r7, r1, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	40d8      	lsrs	r0, r3
 8000d74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d78:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	4301      	orrs	r1, r0
 8000d80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d90:	0c0b      	lsrs	r3, r1, #16
 8000d92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d96:	fb00 f60e 	mul.w	r6, r0, lr
 8000d9a:	429e      	cmp	r6, r3
 8000d9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x260>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000daa:	d22f      	bcs.n	8000e0c <__udivmoddi4+0x2b8>
 8000dac:	429e      	cmp	r6, r3
 8000dae:	d92d      	bls.n	8000e0c <__udivmoddi4+0x2b8>
 8000db0:	3802      	subs	r0, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	1b9b      	subs	r3, r3, r6
 8000db6:	b289      	uxth	r1, r1
 8000db8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x28a>
 8000dcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dd4:	d216      	bcs.n	8000e04 <__udivmoddi4+0x2b0>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d914      	bls.n	8000e04 <__udivmoddi4+0x2b0>
 8000dda:	3e02      	subs	r6, #2
 8000ddc:	4461      	add	r1, ip
 8000dde:	1ac9      	subs	r1, r1, r3
 8000de0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000de4:	e738      	b.n	8000c58 <__udivmoddi4+0x104>
 8000de6:	462e      	mov	r6, r5
 8000de8:	4628      	mov	r0, r5
 8000dea:	e705      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000dec:	4606      	mov	r6, r0
 8000dee:	e6e3      	b.n	8000bb8 <__udivmoddi4+0x64>
 8000df0:	4618      	mov	r0, r3
 8000df2:	e6f8      	b.n	8000be6 <__udivmoddi4+0x92>
 8000df4:	454b      	cmp	r3, r9
 8000df6:	d2a9      	bcs.n	8000d4c <__udivmoddi4+0x1f8>
 8000df8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dfc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e00:	3801      	subs	r0, #1
 8000e02:	e7a3      	b.n	8000d4c <__udivmoddi4+0x1f8>
 8000e04:	4646      	mov	r6, r8
 8000e06:	e7ea      	b.n	8000dde <__udivmoddi4+0x28a>
 8000e08:	4620      	mov	r0, r4
 8000e0a:	e794      	b.n	8000d36 <__udivmoddi4+0x1e2>
 8000e0c:	4640      	mov	r0, r8
 8000e0e:	e7d1      	b.n	8000db4 <__udivmoddi4+0x260>
 8000e10:	46d0      	mov	r8, sl
 8000e12:	e77b      	b.n	8000d0c <__udivmoddi4+0x1b8>
 8000e14:	3b02      	subs	r3, #2
 8000e16:	4461      	add	r1, ip
 8000e18:	e732      	b.n	8000c80 <__udivmoddi4+0x12c>
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	e709      	b.n	8000c32 <__udivmoddi4+0xde>
 8000e1e:	4464      	add	r4, ip
 8000e20:	3802      	subs	r0, #2
 8000e22:	e742      	b.n	8000caa <__udivmoddi4+0x156>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	UNUSED (htim);
	if ( htim -> Instance == htim2.Instance)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d169      	bne.n	8000f10 <HAL_TIM_PeriodElapsedCallback+0xe8>
	{
		TIM1 -> CCR1 = A[count] * modulationC;
 8000e3c:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b37      	ldr	r3, [pc, #220]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e48:	ee07 3a90 	vmov	s15, r3
 8000e4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e50:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000e52:	edd3 7a00 	vldr	s15, [r3]
 8000e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e5a:	4b33      	ldr	r3, [pc, #204]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e60:	ee17 2a90 	vmov	r2, s15
 8000e64:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1 -> CCR2 = B[count] * modulationC ;
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e72:	ee07 3a90 	vmov	s15, r3
 8000e76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e84:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e8a:	ee17 2a90 	vmov	r2, s15
 8000e8e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1 -> CCR3 = C[count] * modulationC;
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9c:	ee07 3a90 	vmov	s15, r3
 8000ea0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000ea6:	edd3 7a00 	vldr	s15, [r3]
 8000eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eb4:	ee17 2a90 	vmov	r2, s15
 8000eb8:	63da      	str	r2, [r3, #60]	; 0x3c

		if ( (count < 360) && ( check == 1))
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000ec2:	d20e      	bcs.n	8000ee2 <HAL_TIM_PeriodElapsedCallback+0xba>
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d10a      	bne.n	8000ee2 <HAL_TIM_PeriodElapsedCallback+0xba>
		{
			count++;
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000ed6:	801a      	strh	r2, [r3, #0]
			TIM2 -> CNT = 0;
 8000ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_GPIO_TogglePin(GPIOC, LED_Pin);
			TIM1->CCR1 = 0; TIM1->CCR2 = 0; TIM1->CCR3 = 0;
			old_fsine = fsine - 2;
		}
	}
}
 8000ee0:	e016      	b.n	8000f10 <HAL_TIM_PeriodElapsedCallback+0xe8>
			count = 0;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8000ee8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eec:	4812      	ldr	r0, [pc, #72]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000eee:	f001 faea 	bl	80024c6 <HAL_GPIO_TogglePin>
			TIM1->CCR1 = 0; TIM1->CCR2 = 0; TIM1->CCR3 = 0;
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	639a      	str	r2, [r3, #56]	; 0x38
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	63da      	str	r2, [r3, #60]	; 0x3c
			old_fsine = fsine - 2;
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000f0e:	701a      	strb	r2, [r3, #0]
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200000b8 	.word	0x200000b8
 8000f1c:	20000110 	.word	0x20000110
 8000f20:	08003fe0 	.word	0x08003fe0
 8000f24:	2000010c 	.word	0x2000010c
 8000f28:	40010000 	.word	0x40010000
 8000f2c:	08004580 	.word	0x08004580
 8000f30:	08004b20 	.word	0x08004b20
 8000f34:	20000112 	.word	0x20000112
 8000f38:	40020800 	.word	0x40020800
 8000f3c:	20000104 	.word	0x20000104
 8000f40:	20000105 	.word	0x20000105
 8000f44:	00000000 	.word	0x00000000

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4c:	f000 fc76 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f50:	f000 f8dc 	bl	800110c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f54:	f000 fa9a 	bl	800148c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f58:	f000 f942 	bl	80011e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f5c:	f000 f992 	bl	8001284 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f60:	f000 fa48 	bl	80013f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f64:	485a      	ldr	r0, [pc, #360]	; (80010d0 <main+0x188>)
 8000f66:	f001 ff3d 	bl	8002de4 <HAL_TIM_Base_Start_IT>
  TIM2 -> ARR = 46620;
 8000f6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f6e:	f24b 621c 	movw	r2, #46620	; 0xb61c
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f74:	2100      	movs	r1, #0
 8000f76:	4857      	ldr	r0, [pc, #348]	; (80010d4 <main+0x18c>)
 8000f78:	f002 f81e 	bl	8002fb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	4855      	ldr	r0, [pc, #340]	; (80010d4 <main+0x18c>)
 8000f80:	f002 f81a 	bl	8002fb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f84:	2108      	movs	r1, #8
 8000f86:	4853      	ldr	r0, [pc, #332]	; (80010d4 <main+0x18c>)
 8000f88:	f002 f816 	bl	8002fb8 <HAL_TIM_PWM_Start>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4851      	ldr	r0, [pc, #324]	; (80010d4 <main+0x18c>)
 8000f90:	f002 fe48 	bl	8003c24 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000f94:	2104      	movs	r1, #4
 8000f96:	484f      	ldr	r0, [pc, #316]	; (80010d4 <main+0x18c>)
 8000f98:	f002 fe44 	bl	8003c24 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	484d      	ldr	r0, [pc, #308]	; (80010d4 <main+0x18c>)
 8000fa0:	f002 fe40 	bl	8003c24 <HAL_TIMEx_PWMN_Start>

  TIM1->CCR1 = 0; TIM1->CCR2 = 0; TIM1->CCR3 = 0;
 8000fa4:	4b4c      	ldr	r3, [pc, #304]	; (80010d8 <main+0x190>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
 8000faa:	4b4b      	ldr	r3, [pc, #300]	; (80010d8 <main+0x190>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	639a      	str	r2, [r3, #56]	; 0x38
 8000fb0:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <main+0x190>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_ADC_Start(&hadc1);
 8000fb6:	4849      	ldr	r0, [pc, #292]	; (80010dc <main+0x194>)
 8000fb8:	f000 fcf6 	bl	80019a8 <HAL_ADC_Start>
  adc_val = HAL_ADC_GetValue(&hadc1);
 8000fbc:	4847      	ldr	r0, [pc, #284]	; (80010dc <main+0x194>)
 8000fbe:	f000 fda7 	bl	8001b10 <HAL_ADC_GetValue>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b46      	ldr	r3, [pc, #280]	; (80010e0 <main+0x198>)
 8000fc8:	801a      	strh	r2, [r3, #0]
  count = 0;
 8000fca:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <main+0x19c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ( count == 0) {
 8000fd0:	4b44      	ldr	r3, [pc, #272]	; (80010e4 <main+0x19c>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1fb      	bne.n	8000fd0 <main+0x88>
		  HAL_TIM_Base_Stop_IT(&htim2);
 8000fd8:	483d      	ldr	r0, [pc, #244]	; (80010d0 <main+0x188>)
 8000fda:	f001 ff65 	bl	8002ea8 <HAL_TIM_Base_Stop_IT>
		  HAL_ADC_Start(&hadc1);
 8000fde:	483f      	ldr	r0, [pc, #252]	; (80010dc <main+0x194>)
 8000fe0:	f000 fce2 	bl	80019a8 <HAL_ADC_Start>
		  adc_val = HAL_ADC_GetValue(&hadc1);
 8000fe4:	483d      	ldr	r0, [pc, #244]	; (80010dc <main+0x194>)
 8000fe6:	f000 fd93 	bl	8001b10 <HAL_ADC_GetValue>
 8000fea:	4603      	mov	r3, r0
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	4b3c      	ldr	r3, [pc, #240]	; (80010e0 <main+0x198>)
 8000ff0:	801a      	strh	r2, [r3, #0]
		  fsine = adc_val / 81 ;
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <main+0x198>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	4a3c      	ldr	r2, [pc, #240]	; (80010e8 <main+0x1a0>)
 8000ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffc:	099b      	lsrs	r3, r3, #6
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b3a      	ldr	r3, [pc, #232]	; (80010ec <main+0x1a4>)
 8001004:	701a      	strb	r2, [r3, #0]
		 if ( fsine >= 5)
 8001006:	4b39      	ldr	r3, [pc, #228]	; (80010ec <main+0x1a4>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b04      	cmp	r3, #4
 800100c:	d948      	bls.n	80010a0 <main+0x158>
		 {
		  	  time = (100000 / ( 36* fsine)) ;
 800100e:	4b37      	ldr	r3, [pc, #220]	; (80010ec <main+0x1a4>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	4613      	mov	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	461a      	mov	r2, r3
 800101e:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <main+0x1a8>)
 8001020:	fb93 f3f2 	sdiv	r3, r3, r2
 8001024:	b29a      	uxth	r2, r3
 8001026:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <main+0x1ac>)
 8001028:	801a      	strh	r2, [r3, #0]
		  	  arr_value = time * 84 ;
 800102a:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <main+0x1ac>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	2354      	movs	r3, #84	; 0x54
 8001032:	fb02 f303 	mul.w	r3, r2, r3
 8001036:	461a      	mov	r2, r3
 8001038:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <main+0x1b0>)
 800103a:	601a      	str	r2, [r3, #0]
		  	  TIM2 -> ARR = arr_value;
 800103c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <main+0x1b0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	62d3      	str	r3, [r2, #44]	; 0x2c
		  	  modulationC = (4.4* fsine) / 60;
 8001046:	4b29      	ldr	r3, [pc, #164]	; (80010ec <main+0x1a4>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa16 	bl	800047c <__aeabi_i2d>
 8001050:	a31b      	add	r3, pc, #108	; (adr r3, 80010c0 <main+0x178>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	f7ff fa7b 	bl	8000550 <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <main+0x1b4>)
 8001068:	f7ff fb9c 	bl	80007a4 <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fd06 	bl	8000a84 <__aeabi_d2f>
 8001078:	4603      	mov	r3, r0
 800107a:	4a21      	ldr	r2, [pc, #132]	; (8001100 <main+0x1b8>)
 800107c:	6013      	str	r3, [r2, #0]
		  	  	  if (modulationC >= 0.9) modulationC = 0.9;
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <main+0x1b8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa0c 	bl	80004a0 <__aeabi_f2d>
 8001088:	a30f      	add	r3, pc, #60	; (adr r3, 80010c8 <main+0x180>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fce5 	bl	8000a5c <__aeabi_dcmpge>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00b      	beq.n	80010b0 <main+0x168>
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <main+0x1b8>)
 800109a:	4a1a      	ldr	r2, [pc, #104]	; (8001104 <main+0x1bc>)
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e007      	b.n	80010b0 <main+0x168>
		 }
		 else  if ( fsine < 5)
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <main+0x1a4>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d803      	bhi.n	80010b0 <main+0x168>
		  {
		   	   modulationC = 0;
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <main+0x1b8>)
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
		  }

		 check = 1;
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <main+0x1c0>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	801a      	strh	r2, [r3, #0]
		 HAL_TIM_Base_Start_IT(&htim2);
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <main+0x188>)
 80010b8:	f001 fe94 	bl	8002de4 <HAL_TIM_Base_Start_IT>
	  if ( count == 0) {
 80010bc:	e788      	b.n	8000fd0 <main+0x88>
 80010be:	bf00      	nop
 80010c0:	9999999a 	.word	0x9999999a
 80010c4:	40119999 	.word	0x40119999
 80010c8:	cccccccd 	.word	0xcccccccd
 80010cc:	3feccccc 	.word	0x3feccccc
 80010d0:	200000b8 	.word	0x200000b8
 80010d4:	20000070 	.word	0x20000070
 80010d8:	40010000 	.word	0x40010000
 80010dc:	20000028 	.word	0x20000028
 80010e0:	20000100 	.word	0x20000100
 80010e4:	20000110 	.word	0x20000110
 80010e8:	ca4587e7 	.word	0xca4587e7
 80010ec:	20000104 	.word	0x20000104
 80010f0:	000186a0 	.word	0x000186a0
 80010f4:	20000102 	.word	0x20000102
 80010f8:	20000108 	.word	0x20000108
 80010fc:	404e0000 	.word	0x404e0000
 8001100:	2000010c 	.word	0x2000010c
 8001104:	3f666666 	.word	0x3f666666
 8001108:	20000112 	.word	0x20000112

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b094      	sub	sp, #80	; 0x50
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	2230      	movs	r2, #48	; 0x30
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f002 ff4c 	bl	8003fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <SystemClock_Config+0xcc>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	4a27      	ldr	r2, [pc, #156]	; (80011d8 <SystemClock_Config+0xcc>)
 800113a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113e:	6413      	str	r3, [r2, #64]	; 0x40
 8001140:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <SystemClock_Config+0xcc>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	4b22      	ldr	r3, [pc, #136]	; (80011dc <SystemClock_Config+0xd0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001158:	4a20      	ldr	r2, [pc, #128]	; (80011dc <SystemClock_Config+0xd0>)
 800115a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <SystemClock_Config+0xd0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800116c:	2301      	movs	r3, #1
 800116e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001176:	2302      	movs	r3, #2
 8001178:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800117e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001180:	2319      	movs	r3, #25
 8001182:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001184:	23a8      	movs	r3, #168	; 0xa8
 8001186:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001188:	2302      	movs	r3, #2
 800118a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800118c:	2304      	movs	r3, #4
 800118e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001190:	f107 0320 	add.w	r3, r7, #32
 8001194:	4618      	mov	r0, r3
 8001196:	f001 f9b1 	bl	80024fc <HAL_RCC_OscConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011a0:	f000 f9d4 	bl	800154c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a4:	230f      	movs	r3, #15
 80011a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a8:	2302      	movs	r3, #2
 80011aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	2102      	movs	r1, #2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 fc13 	bl	80029ec <HAL_RCC_ClockConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011cc:	f000 f9be 	bl	800154c <Error_Handler>
  }
}
 80011d0:	bf00      	nop
 80011d2:	3750      	adds	r7, #80	; 0x50
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40007000 	.word	0x40007000

080011e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011e6:	463b      	mov	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_ADC1_Init+0x98>)
 80011f4:	4a21      	ldr	r2, [pc, #132]	; (800127c <MX_ADC1_Init+0x9c>)
 80011f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <MX_ADC1_Init+0x98>)
 80011fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_ADC1_Init+0x98>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <MX_ADC1_Init+0x98>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_ADC1_Init+0x98>)
 800120e:	2200      	movs	r2, #0
 8001210:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_ADC1_Init+0x98>)
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_ADC1_Init+0x98>)
 800121c:	2200      	movs	r2, #0
 800121e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <MX_ADC1_Init+0x98>)
 8001222:	4a17      	ldr	r2, [pc, #92]	; (8001280 <MX_ADC1_Init+0xa0>)
 8001224:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_ADC1_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_ADC1_Init+0x98>)
 800122e:	2201      	movs	r2, #1
 8001230:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_ADC1_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_ADC1_Init+0x98>)
 800123c:	2201      	movs	r2, #1
 800123e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_ADC1_Init+0x98>)
 8001242:	f000 fb6d 	bl	8001920 <HAL_ADC_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800124c:	f000 f97e 	bl	800154c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001250:	2300      	movs	r3, #0
 8001252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001254:	2301      	movs	r3, #1
 8001256:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001258:	2306      	movs	r3, #6
 800125a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_ADC1_Init+0x98>)
 8001262:	f000 fc63 	bl	8001b2c <HAL_ADC_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800126c:	f000 f96e 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000028 	.word	0x20000028
 800127c:	40012000 	.word	0x40012000
 8001280:	0f000001 	.word	0x0f000001

08001284 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b096      	sub	sp, #88	; 0x58
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2220      	movs	r2, #32
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 fe7b 	bl	8003fb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012c2:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <MX_TIM1_Init+0x168>)
 80012c4:	4a4a      	ldr	r2, [pc, #296]	; (80013f0 <MX_TIM1_Init+0x16c>)
 80012c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80012c8:	4b48      	ldr	r3, [pc, #288]	; (80013ec <MX_TIM1_Init+0x168>)
 80012ca:	2204      	movs	r2, #4
 80012cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80012ce:	4b47      	ldr	r3, [pc, #284]	; (80013ec <MX_TIM1_Init+0x168>)
 80012d0:	2220      	movs	r2, #32
 80012d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1050;
 80012d4:	4b45      	ldr	r3, [pc, #276]	; (80013ec <MX_TIM1_Init+0x168>)
 80012d6:	f240 421a 	movw	r2, #1050	; 0x41a
 80012da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012dc:	4b43      	ldr	r3, [pc, #268]	; (80013ec <MX_TIM1_Init+0x168>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012e2:	4b42      	ldr	r3, [pc, #264]	; (80013ec <MX_TIM1_Init+0x168>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012e8:	4b40      	ldr	r3, [pc, #256]	; (80013ec <MX_TIM1_Init+0x168>)
 80012ea:	2280      	movs	r2, #128	; 0x80
 80012ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ee:	483f      	ldr	r0, [pc, #252]	; (80013ec <MX_TIM1_Init+0x168>)
 80012f0:	f001 fd28 	bl	8002d44 <HAL_TIM_Base_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012fa:	f000 f927 	bl	800154c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001302:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001304:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001308:	4619      	mov	r1, r3
 800130a:	4838      	ldr	r0, [pc, #224]	; (80013ec <MX_TIM1_Init+0x168>)
 800130c:	f002 f8ce 	bl	80034ac <HAL_TIM_ConfigClockSource>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001316:	f000 f919 	bl	800154c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800131a:	4834      	ldr	r0, [pc, #208]	; (80013ec <MX_TIM1_Init+0x168>)
 800131c:	f001 fdf3 	bl	8002f06 <HAL_TIM_PWM_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001326:	f000 f911 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001332:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001336:	4619      	mov	r1, r3
 8001338:	482c      	ldr	r0, [pc, #176]	; (80013ec <MX_TIM1_Init+0x168>)
 800133a:	f002 fd1f 	bl	8003d7c <HAL_TIMEx_MasterConfigSynchronization>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001344:	f000 f902 	bl	800154c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001348:	2360      	movs	r3, #96	; 0x60
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001354:	2300      	movs	r3, #0
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001368:	2200      	movs	r2, #0
 800136a:	4619      	mov	r1, r3
 800136c:	481f      	ldr	r0, [pc, #124]	; (80013ec <MX_TIM1_Init+0x168>)
 800136e:	f001 ffdb 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001378:	f000 f8e8 	bl	800154c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	2204      	movs	r2, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4819      	ldr	r0, [pc, #100]	; (80013ec <MX_TIM1_Init+0x168>)
 8001386:	f001 ffcf 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001390:	f000 f8dc 	bl	800154c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001398:	2208      	movs	r2, #8
 800139a:	4619      	mov	r1, r3
 800139c:	4813      	ldr	r0, [pc, #76]	; (80013ec <MX_TIM1_Init+0x168>)
 800139e:	f001 ffc3 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80013a8:	f000 f8d0 	bl	800154c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 202;
 80013b8:	23ca      	movs	r3, #202	; 0xca
 80013ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4807      	ldr	r0, [pc, #28]	; (80013ec <MX_TIM1_Init+0x168>)
 80013d0:	f002 fd42 	bl	8003e58 <HAL_TIMEx_ConfigBreakDeadTime>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80013da:	f000 f8b7 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013de:	4803      	ldr	r0, [pc, #12]	; (80013ec <MX_TIM1_Init+0x168>)
 80013e0:	f000 f962 	bl	80016a8 <HAL_TIM_MspPostInit>

}
 80013e4:	bf00      	nop
 80013e6:	3758      	adds	r7, #88	; 0x58
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000070 	.word	0x20000070
 80013f0:	40010000 	.word	0x40010000

080013f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_TIM2_Init+0x94>)
 8001412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001416:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_TIM2_Init+0x94>)
 800141a:	2200      	movs	r2, #0
 800141c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_TIM2_Init+0x94>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 46620;
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_TIM2_Init+0x94>)
 8001426:	f24b 621c 	movw	r2, #46620	; 0xb61c
 800142a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_TIM2_Init+0x94>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <MX_TIM2_Init+0x94>)
 8001434:	2280      	movs	r2, #128	; 0x80
 8001436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001438:	4813      	ldr	r0, [pc, #76]	; (8001488 <MX_TIM2_Init+0x94>)
 800143a:	f001 fc83 	bl	8002d44 <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001444:	f000 f882 	bl	800154c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	4619      	mov	r1, r3
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <MX_TIM2_Init+0x94>)
 8001456:	f002 f829 	bl	80034ac <HAL_TIM_ConfigClockSource>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001460:	f000 f874 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800146c:	463b      	mov	r3, r7
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_TIM2_Init+0x94>)
 8001472:	f002 fc83 	bl	8003d7c <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800147c:	f000 f866 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200000b8 	.word	0x200000b8

0800148c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	4b27      	ldr	r3, [pc, #156]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a26      	ldr	r2, [pc, #152]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b24      	ldr	r3, [pc, #144]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a18      	ldr	r2, [pc, #96]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_GPIO_Init+0xb8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a11      	ldr	r2, [pc, #68]	; (8001544 <MX_GPIO_Init+0xb8>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_GPIO_Init+0xb8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001512:	2200      	movs	r2, #0
 8001514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001518:	480b      	ldr	r0, [pc, #44]	; (8001548 <MX_GPIO_Init+0xbc>)
 800151a:	f000 ffbb 	bl	8002494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800151e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4804      	ldr	r0, [pc, #16]	; (8001548 <MX_GPIO_Init+0xbc>)
 8001538:	f000 fe28 	bl	800218c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	40020800 	.word	0x40020800

0800154c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001554:	e7fe      	b.n	8001554 <Error_Handler+0x8>
	...

08001558 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_MspInit+0x4c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <HAL_MspInit+0x4c>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156c:	6453      	str	r3, [r2, #68]	; 0x44
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_MspInit+0x4c>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_MspInit+0x4c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <HAL_MspInit+0x4c>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_MspInit+0x4c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800

080015a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a17      	ldr	r2, [pc, #92]	; (8001624 <HAL_ADC_MspInit+0x7c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d127      	bne.n	800161a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <HAL_ADC_MspInit+0x80>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a15      	ldr	r2, [pc, #84]	; (8001628 <HAL_ADC_MspInit+0x80>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <HAL_ADC_MspInit+0x80>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_ADC_MspInit+0x80>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <HAL_ADC_MspInit+0x80>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_ADC_MspInit+0x80>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001602:	2301      	movs	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001606:	2303      	movs	r3, #3
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <HAL_ADC_MspInit+0x84>)
 8001616:	f000 fdb9 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	; 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40012000 	.word	0x40012000
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000

08001630 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <HAL_TIM_Base_MspInit+0x70>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d10e      	bne.n	8001660 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HAL_TIM_Base_MspInit+0x74>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a16      	ldr	r2, [pc, #88]	; (80016a4 <HAL_TIM_Base_MspInit+0x74>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_TIM_Base_MspInit+0x74>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800165e:	e01a      	b.n	8001696 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001668:	d115      	bne.n	8001696 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HAL_TIM_Base_MspInit+0x74>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a0c      	ldr	r2, [pc, #48]	; (80016a4 <HAL_TIM_Base_MspInit+0x74>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_TIM_Base_MspInit+0x74>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2102      	movs	r1, #2
 800168a:	201c      	movs	r0, #28
 800168c:	f000 fd47 	bl	800211e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001690:	201c      	movs	r0, #28
 8001692:	f000 fd60 	bl	8002156 <HAL_NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40010000 	.word	0x40010000
 80016a4:	40023800 	.word	0x40023800

080016a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a21      	ldr	r2, [pc, #132]	; (800174c <HAL_TIM_MspPostInit+0xa4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d13c      	bne.n	8001744 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_TIM_MspPostInit+0xa8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <HAL_TIM_MspPostInit+0xa8>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <HAL_TIM_MspPostInit+0xa8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_TIM_MspPostInit+0xa8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a18      	ldr	r2, [pc, #96]	; (8001750 <HAL_TIM_MspPostInit+0xa8>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_TIM_MspPostInit+0xa8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001702:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001714:	2301      	movs	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	480d      	ldr	r0, [pc, #52]	; (8001754 <HAL_TIM_MspPostInit+0xac>)
 8001720:	f000 fd34 	bl	800218c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001724:	2303      	movs	r3, #3
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001734:	2301      	movs	r3, #1
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <HAL_TIM_MspPostInit+0xb0>)
 8001740:	f000 fd24 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	; 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40010000 	.word	0x40010000
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000
 8001758:	40020400 	.word	0x40020400

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <NMI_Handler+0x4>

08001762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <MemManage_Handler+0x4>

0800176e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <BusFault_Handler+0x4>

08001774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <UsageFault_Handler+0x4>

0800177a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a8:	f000 f89a 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <TIM2_IRQHandler+0x10>)
 80017b6:	f001 fcaf 	bl	8003118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200000b8 	.word	0x200000b8

080017c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ee:	490e      	ldr	r1, [pc, #56]	; (8001828 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001804:	4c0b      	ldr	r4, [pc, #44]	; (8001834 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001812:	f7ff ffd7 	bl	80017c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001816:	f002 fbab 	bl	8003f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181a:	f7ff fb95 	bl	8000f48 <main>
  bx  lr    
 800181e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001820:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800182c:	080050e0 	.word	0x080050e0
  ldr r2, =_sbss
 8001830:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001834:	20000118 	.word	0x20000118

08001838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <HAL_Init+0x40>)
 8001846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <HAL_Init+0x40>)
 8001852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	; (800187c <HAL_Init+0x40>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 fc4f 	bl	8002108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	2000      	movs	r0, #0
 800186c:	f000 f808 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff fe72 	bl	8001558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fc67 	bl	8002172 <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 fc2f 	bl	800211e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	; (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000008 	.word	0x20000008
 8001904:	20000114 	.word	0x20000114

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000114 	.word	0x20000114

08001920 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e033      	b.n	800199e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	2b00      	cmp	r3, #0
 800193c:	d109      	bne.n	8001952 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fe32 	bl	80015a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	2b00      	cmp	r3, #0
 800195c:	d118      	bne.n	8001990 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001966:	f023 0302 	bic.w	r3, r3, #2
 800196a:	f043 0202 	orr.w	r2, r3, #2
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f9fc 	bl	8001d70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f023 0303 	bic.w	r3, r3, #3
 8001986:	f043 0201 	orr.w	r2, r3, #1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	641a      	str	r2, [r3, #64]	; 0x40
 800198e:	e001      	b.n	8001994 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_Start+0x1a>
 80019be:	2302      	movs	r3, #2
 80019c0:	e097      	b.n	8001af2 <HAL_ADC_Start+0x14a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d018      	beq.n	8001a0a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019e8:	4b45      	ldr	r3, [pc, #276]	; (8001b00 <HAL_ADC_Start+0x158>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a45      	ldr	r2, [pc, #276]	; (8001b04 <HAL_ADC_Start+0x15c>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0c9a      	lsrs	r2, r3, #18
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019fc:	e002      	b.n	8001a04 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f9      	bne.n	80019fe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d15f      	bne.n	8001ad8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a56:	d106      	bne.n	8001a66 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5c:	f023 0206 	bic.w	r2, r3, #6
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	645a      	str	r2, [r3, #68]	; 0x44
 8001a64:	e002      	b.n	8001a6c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_ADC_Start+0x160>)
 8001a76:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a80:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10f      	bne.n	8001aae <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d129      	bne.n	8001af0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	e020      	b.n	8001af0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a16      	ldr	r2, [pc, #88]	; (8001b0c <HAL_ADC_Start+0x164>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d11b      	bne.n	8001af0 <HAL_ADC_Start+0x148>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d114      	bne.n	8001af0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	e00b      	b.n	8001af0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f043 0210 	orr.w	r2, r3, #16
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	f043 0201 	orr.w	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000000 	.word	0x20000000
 8001b04:	431bde83 	.word	0x431bde83
 8001b08:	40012300 	.word	0x40012300
 8001b0c:	40012000 	.word	0x40012000

08001b10 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1c>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e105      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x228>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b09      	cmp	r3, #9
 8001b56:	d925      	bls.n	8001ba4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68d9      	ldr	r1, [r3, #12]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b1e      	subs	r3, #30
 8001b6e:	2207      	movs	r2, #7
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43da      	mvns	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68d9      	ldr	r1, [r3, #12]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	4603      	mov	r3, r0
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4403      	add	r3, r0
 8001b96:	3b1e      	subs	r3, #30
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	e022      	b.n	8001bea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6919      	ldr	r1, [r3, #16]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	2207      	movs	r2, #7
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6919      	ldr	r1, [r3, #16]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4403      	add	r3, r0
 8001be0:	409a      	lsls	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d824      	bhi.n	8001c3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	3b05      	subs	r3, #5
 8001c04:	221f      	movs	r2, #31
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	400a      	ands	r2, r1
 8001c12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b05      	subs	r3, #5
 8001c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	635a      	str	r2, [r3, #52]	; 0x34
 8001c3a:	e04c      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b0c      	cmp	r3, #12
 8001c42:	d824      	bhi.n	8001c8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	3b23      	subs	r3, #35	; 0x23
 8001c56:	221f      	movs	r2, #31
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43da      	mvns	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	400a      	ands	r2, r1
 8001c64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b23      	subs	r3, #35	; 0x23
 8001c80:	fa00 f203 	lsl.w	r2, r0, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c8c:	e023      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3b41      	subs	r3, #65	; 0x41
 8001ca0:	221f      	movs	r2, #31
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	400a      	ands	r2, r1
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3b41      	subs	r3, #65	; 0x41
 8001cca:	fa00 f203 	lsl.w	r2, r0, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <HAL_ADC_ConfigChannel+0x234>)
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a21      	ldr	r2, [pc, #132]	; (8001d64 <HAL_ADC_ConfigChannel+0x238>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d109      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b12      	cmp	r3, #18
 8001cea:	d105      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a19      	ldr	r2, [pc, #100]	; (8001d64 <HAL_ADC_ConfigChannel+0x238>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d123      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x21e>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b10      	cmp	r3, #16
 8001d08:	d003      	beq.n	8001d12 <HAL_ADC_ConfigChannel+0x1e6>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b11      	cmp	r3, #17
 8001d10:	d11b      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d111      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_ADC_ConfigChannel+0x23c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_ADC_ConfigChannel+0x240>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	0c9a      	lsrs	r2, r3, #18
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d3c:	e002      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f9      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40012300 	.word	0x40012300
 8001d64:	40012000 	.word	0x40012000
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	431bde83 	.word	0x431bde83

08001d70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d78:	4b79      	ldr	r3, [pc, #484]	; (8001f60 <ADC_Init+0x1f0>)
 8001d7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	431a      	orrs	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	021a      	lsls	r2, r3, #8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6899      	ldr	r1, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <ADC_Init+0x1f4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d022      	beq.n	8001e4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6899      	ldr	r1, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6899      	ldr	r1, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	e00f      	b.n	8001e6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0202 	bic.w	r2, r2, #2
 8001e7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6899      	ldr	r1, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7e1b      	ldrb	r3, [r3, #24]
 8001e88:	005a      	lsls	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d01b      	beq.n	8001ed4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eaa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6859      	ldr	r1, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	035a      	lsls	r2, r3, #13
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	e007      	b.n	8001ee4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	051a      	lsls	r2, r3, #20
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6899      	ldr	r1, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f26:	025a      	lsls	r2, r3, #9
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6899      	ldr	r1, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	029a      	lsls	r2, r3, #10
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	609a      	str	r2, [r3, #8]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40012300 	.word	0x40012300
 8001f64:	0f000001 	.word	0x0f000001

08001f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9a:	4a04      	ldr	r2, [pc, #16]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	60d3      	str	r3, [r2, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 0307 	and.w	r3, r3, #7
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db0b      	blt.n	8001ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4907      	ldr	r1, [pc, #28]	; (8002004 <__NVIC_EnableIRQ+0x38>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	2001      	movs	r0, #1
 8001fee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e100 	.word	0xe000e100

08002008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	2b00      	cmp	r3, #0
 800201a:	db0a      	blt.n	8002032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	490c      	ldr	r1, [pc, #48]	; (8002054 <__NVIC_SetPriority+0x4c>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	0112      	lsls	r2, r2, #4
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	440b      	add	r3, r1
 800202c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002030:	e00a      	b.n	8002048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4908      	ldr	r1, [pc, #32]	; (8002058 <__NVIC_SetPriority+0x50>)
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	3b04      	subs	r3, #4
 8002040:	0112      	lsls	r2, r2, #4
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	440b      	add	r3, r1
 8002046:	761a      	strb	r2, [r3, #24]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000e100 	.word	0xe000e100
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f1c3 0307 	rsb	r3, r3, #7
 8002076:	2b04      	cmp	r3, #4
 8002078:	bf28      	it	cs
 800207a:	2304      	movcs	r3, #4
 800207c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3304      	adds	r3, #4
 8002082:	2b06      	cmp	r3, #6
 8002084:	d902      	bls.n	800208c <NVIC_EncodePriority+0x30>
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3b03      	subs	r3, #3
 800208a:	e000      	b.n	800208e <NVIC_EncodePriority+0x32>
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	f04f 32ff 	mov.w	r2, #4294967295
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	401a      	ands	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43d9      	mvns	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	4313      	orrs	r3, r2
         );
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3724      	adds	r7, #36	; 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d4:	d301      	bcc.n	80020da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00f      	b.n	80020fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <SysTick_Config+0x40>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e2:	210f      	movs	r1, #15
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f7ff ff8e 	bl	8002008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <SysTick_Config+0x40>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f2:	4b04      	ldr	r3, [pc, #16]	; (8002104 <SysTick_Config+0x40>)
 80020f4:	2207      	movs	r2, #7
 80020f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	e000e010 	.word	0xe000e010

08002108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff29 	bl	8001f68 <__NVIC_SetPriorityGrouping>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002130:	f7ff ff3e 	bl	8001fb0 <__NVIC_GetPriorityGrouping>
 8002134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	6978      	ldr	r0, [r7, #20]
 800213c:	f7ff ff8e 	bl	800205c <NVIC_EncodePriority>
 8002140:	4602      	mov	r2, r0
 8002142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff5d 	bl	8002008 <__NVIC_SetPriority>
}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff31 	bl	8001fcc <__NVIC_EnableIRQ>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ffa2 	bl	80020c4 <SysTick_Config>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	e159      	b.n	800245c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	f040 8148 	bne.w	8002456 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d005      	beq.n	80021de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d130      	bne.n	8002240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2203      	movs	r2, #3
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002214:	2201      	movs	r2, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 0201 	and.w	r2, r3, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b03      	cmp	r3, #3
 800224a:	d017      	beq.n	800227c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d123      	bne.n	80022d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	08da      	lsrs	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3208      	adds	r2, #8
 8002290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	220f      	movs	r2, #15
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	08da      	lsrs	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3208      	adds	r2, #8
 80022ca:	69b9      	ldr	r1, [r7, #24]
 80022cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0203 	and.w	r2, r3, #3
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a2 	beq.w	8002456 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b57      	ldr	r3, [pc, #348]	; (8002474 <HAL_GPIO_Init+0x2e8>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	4a56      	ldr	r2, [pc, #344]	; (8002474 <HAL_GPIO_Init+0x2e8>)
 800231c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002320:	6453      	str	r3, [r2, #68]	; 0x44
 8002322:	4b54      	ldr	r3, [pc, #336]	; (8002474 <HAL_GPIO_Init+0x2e8>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232e:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_GPIO_Init+0x2ec>)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a49      	ldr	r2, [pc, #292]	; (800247c <HAL_GPIO_Init+0x2f0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d019      	beq.n	800238e <HAL_GPIO_Init+0x202>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a48      	ldr	r2, [pc, #288]	; (8002480 <HAL_GPIO_Init+0x2f4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_GPIO_Init+0x1fe>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a47      	ldr	r2, [pc, #284]	; (8002484 <HAL_GPIO_Init+0x2f8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00d      	beq.n	8002386 <HAL_GPIO_Init+0x1fa>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a46      	ldr	r2, [pc, #280]	; (8002488 <HAL_GPIO_Init+0x2fc>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <HAL_GPIO_Init+0x1f6>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a45      	ldr	r2, [pc, #276]	; (800248c <HAL_GPIO_Init+0x300>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_GPIO_Init+0x1f2>
 800237a:	2304      	movs	r3, #4
 800237c:	e008      	b.n	8002390 <HAL_GPIO_Init+0x204>
 800237e:	2307      	movs	r3, #7
 8002380:	e006      	b.n	8002390 <HAL_GPIO_Init+0x204>
 8002382:	2303      	movs	r3, #3
 8002384:	e004      	b.n	8002390 <HAL_GPIO_Init+0x204>
 8002386:	2302      	movs	r3, #2
 8002388:	e002      	b.n	8002390 <HAL_GPIO_Init+0x204>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_GPIO_Init+0x204>
 800238e:	2300      	movs	r3, #0
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	f002 0203 	and.w	r2, r2, #3
 8002396:	0092      	lsls	r2, r2, #2
 8002398:	4093      	lsls	r3, r2
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a0:	4935      	ldr	r1, [pc, #212]	; (8002478 <HAL_GPIO_Init+0x2ec>)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ae:	4b38      	ldr	r3, [pc, #224]	; (8002490 <HAL_GPIO_Init+0x304>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023d2:	4a2f      	ldr	r2, [pc, #188]	; (8002490 <HAL_GPIO_Init+0x304>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d8:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_GPIO_Init+0x304>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023fc:	4a24      	ldr	r2, [pc, #144]	; (8002490 <HAL_GPIO_Init+0x304>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002402:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_GPIO_Init+0x304>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002426:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <HAL_GPIO_Init+0x304>)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_GPIO_Init+0x304>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002450:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <HAL_GPIO_Init+0x304>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3301      	adds	r3, #1
 800245a:	61fb      	str	r3, [r7, #28]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b0f      	cmp	r3, #15
 8002460:	f67f aea2 	bls.w	80021a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800
 8002478:	40013800 	.word	0x40013800
 800247c:	40020000 	.word	0x40020000
 8002480:	40020400 	.word	0x40020400
 8002484:	40020800 	.word	0x40020800
 8002488:	40020c00 	.word	0x40020c00
 800248c:	40021000 	.word	0x40021000
 8002490:	40013c00 	.word	0x40013c00

08002494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
 80024a0:	4613      	mov	r3, r2
 80024a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a4:	787b      	ldrb	r3, [r7, #1]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024b0:	e003      	b.n	80024ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024b2:	887b      	ldrh	r3, [r7, #2]
 80024b4:	041a      	lsls	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	619a      	str	r2, [r3, #24]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b085      	sub	sp, #20
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024d8:	887a      	ldrh	r2, [r7, #2]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4013      	ands	r3, r2
 80024de:	041a      	lsls	r2, r3, #16
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	43d9      	mvns	r1, r3
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	400b      	ands	r3, r1
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	619a      	str	r2, [r3, #24]
}
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e267      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d075      	beq.n	8002606 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800251a:	4b88      	ldr	r3, [pc, #544]	; (800273c <HAL_RCC_OscConfig+0x240>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b04      	cmp	r3, #4
 8002524:	d00c      	beq.n	8002540 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002526:	4b85      	ldr	r3, [pc, #532]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800252e:	2b08      	cmp	r3, #8
 8002530:	d112      	bne.n	8002558 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002532:	4b82      	ldr	r3, [pc, #520]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800253e:	d10b      	bne.n	8002558 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	4b7e      	ldr	r3, [pc, #504]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d05b      	beq.n	8002604 <HAL_RCC_OscConfig+0x108>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d157      	bne.n	8002604 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e242      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002560:	d106      	bne.n	8002570 <HAL_RCC_OscConfig+0x74>
 8002562:	4b76      	ldr	r3, [pc, #472]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a75      	ldr	r2, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e01d      	b.n	80025ac <HAL_RCC_OscConfig+0xb0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0x98>
 800257a:	4b70      	ldr	r3, [pc, #448]	; (800273c <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a6f      	ldr	r2, [pc, #444]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b6d      	ldr	r3, [pc, #436]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a6c      	ldr	r2, [pc, #432]	; (800273c <HAL_RCC_OscConfig+0x240>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e00b      	b.n	80025ac <HAL_RCC_OscConfig+0xb0>
 8002594:	4b69      	ldr	r3, [pc, #420]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a68      	ldr	r2, [pc, #416]	; (800273c <HAL_RCC_OscConfig+0x240>)
 800259a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b66      	ldr	r3, [pc, #408]	; (800273c <HAL_RCC_OscConfig+0x240>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a65      	ldr	r2, [pc, #404]	; (800273c <HAL_RCC_OscConfig+0x240>)
 80025a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d013      	beq.n	80025dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7ff f9a8 	bl	8001908 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025bc:	f7ff f9a4 	bl	8001908 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	; 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e207      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	4b5b      	ldr	r3, [pc, #364]	; (800273c <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0xc0>
 80025da:	e014      	b.n	8002606 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7ff f994 	bl	8001908 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e4:	f7ff f990 	bl	8001908 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b64      	cmp	r3, #100	; 0x64
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1f3      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f6:	4b51      	ldr	r3, [pc, #324]	; (800273c <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0xe8>
 8002602:	e000      	b.n	8002606 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d063      	beq.n	80026da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002612:	4b4a      	ldr	r3, [pc, #296]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00b      	beq.n	8002636 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002626:	2b08      	cmp	r3, #8
 8002628:	d11c      	bne.n	8002664 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262a:	4b44      	ldr	r3, [pc, #272]	; (800273c <HAL_RCC_OscConfig+0x240>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d116      	bne.n	8002664 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	4b41      	ldr	r3, [pc, #260]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_RCC_OscConfig+0x152>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d001      	beq.n	800264e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e1c7      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264e:	4b3b      	ldr	r3, [pc, #236]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4937      	ldr	r1, [pc, #220]	; (800273c <HAL_RCC_OscConfig+0x240>)
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002662:	e03a      	b.n	80026da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800266c:	4b34      	ldr	r3, [pc, #208]	; (8002740 <HAL_RCC_OscConfig+0x244>)
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002672:	f7ff f949 	bl	8001908 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267a:	f7ff f945 	bl	8001908 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e1a8      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCC_OscConfig+0x240>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002698:	4b28      	ldr	r3, [pc, #160]	; (800273c <HAL_RCC_OscConfig+0x240>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4925      	ldr	r1, [pc, #148]	; (800273c <HAL_RCC_OscConfig+0x240>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
 80026ac:	e015      	b.n	80026da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ae:	4b24      	ldr	r3, [pc, #144]	; (8002740 <HAL_RCC_OscConfig+0x244>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7ff f928 	bl	8001908 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026bc:	f7ff f924 	bl	8001908 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e187      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_RCC_OscConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d036      	beq.n	8002754 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d016      	beq.n	800271c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_RCC_OscConfig+0x248>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f4:	f7ff f908 	bl	8001908 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fc:	f7ff f904 	bl	8001908 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e167      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x200>
 800271a:	e01b      	b.n	8002754 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCC_OscConfig+0x248>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002722:	f7ff f8f1 	bl	8001908 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002728:	e00e      	b.n	8002748 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272a:	f7ff f8ed 	bl	8001908 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d907      	bls.n	8002748 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e150      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
 800273c:	40023800 	.word	0x40023800
 8002740:	42470000 	.word	0x42470000
 8002744:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002748:	4b88      	ldr	r3, [pc, #544]	; (800296c <HAL_RCC_OscConfig+0x470>)
 800274a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1ea      	bne.n	800272a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 8097 	beq.w	8002890 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002766:	4b81      	ldr	r3, [pc, #516]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10f      	bne.n	8002792 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	4b7d      	ldr	r3, [pc, #500]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a7c      	ldr	r2, [pc, #496]	; (800296c <HAL_RCC_OscConfig+0x470>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b7a      	ldr	r3, [pc, #488]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278e:	2301      	movs	r3, #1
 8002790:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002792:	4b77      	ldr	r3, [pc, #476]	; (8002970 <HAL_RCC_OscConfig+0x474>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d118      	bne.n	80027d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279e:	4b74      	ldr	r3, [pc, #464]	; (8002970 <HAL_RCC_OscConfig+0x474>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a73      	ldr	r2, [pc, #460]	; (8002970 <HAL_RCC_OscConfig+0x474>)
 80027a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027aa:	f7ff f8ad 	bl	8001908 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b2:	f7ff f8a9 	bl	8001908 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e10c      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	4b6a      	ldr	r3, [pc, #424]	; (8002970 <HAL_RCC_OscConfig+0x474>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x2ea>
 80027d8:	4b64      	ldr	r3, [pc, #400]	; (800296c <HAL_RCC_OscConfig+0x470>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a63      	ldr	r2, [pc, #396]	; (800296c <HAL_RCC_OscConfig+0x470>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
 80027e4:	e01c      	b.n	8002820 <HAL_RCC_OscConfig+0x324>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x30c>
 80027ee:	4b5f      	ldr	r3, [pc, #380]	; (800296c <HAL_RCC_OscConfig+0x470>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a5e      	ldr	r2, [pc, #376]	; (800296c <HAL_RCC_OscConfig+0x470>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
 80027fa:	4b5c      	ldr	r3, [pc, #368]	; (800296c <HAL_RCC_OscConfig+0x470>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a5b      	ldr	r2, [pc, #364]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0x324>
 8002808:	4b58      	ldr	r3, [pc, #352]	; (800296c <HAL_RCC_OscConfig+0x470>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	4a57      	ldr	r2, [pc, #348]	; (800296c <HAL_RCC_OscConfig+0x470>)
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	6713      	str	r3, [r2, #112]	; 0x70
 8002814:	4b55      	ldr	r3, [pc, #340]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	4a54      	ldr	r2, [pc, #336]	; (800296c <HAL_RCC_OscConfig+0x470>)
 800281a:	f023 0304 	bic.w	r3, r3, #4
 800281e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d015      	beq.n	8002854 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7ff f86e 	bl	8001908 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282e:	e00a      	b.n	8002846 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002830:	f7ff f86a 	bl	8001908 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	; 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e0cb      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002846:	4b49      	ldr	r3, [pc, #292]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0ee      	beq.n	8002830 <HAL_RCC_OscConfig+0x334>
 8002852:	e014      	b.n	800287e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7ff f858 	bl	8001908 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285a:	e00a      	b.n	8002872 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7ff f854 	bl	8001908 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	; 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e0b5      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002872:	4b3e      	ldr	r3, [pc, #248]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1ee      	bne.n	800285c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d105      	bne.n	8002890 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002884:	4b39      	ldr	r3, [pc, #228]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	4a38      	ldr	r2, [pc, #224]	; (800296c <HAL_RCC_OscConfig+0x470>)
 800288a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80a1 	beq.w	80029dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800289a:	4b34      	ldr	r3, [pc, #208]	; (800296c <HAL_RCC_OscConfig+0x470>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d05c      	beq.n	8002960 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d141      	bne.n	8002932 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ae:	4b31      	ldr	r3, [pc, #196]	; (8002974 <HAL_RCC_OscConfig+0x478>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7ff f828 	bl	8001908 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028bc:	f7ff f824 	bl	8001908 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e087      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ce:	4b27      	ldr	r3, [pc, #156]	; (800296c <HAL_RCC_OscConfig+0x470>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	019b      	lsls	r3, r3, #6
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	3b01      	subs	r3, #1
 80028f4:	041b      	lsls	r3, r3, #16
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	491b      	ldr	r1, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002904:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_RCC_OscConfig+0x478>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7fe fffd 	bl	8001908 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002912:	f7fe fff9 	bl	8001908 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e05c      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x416>
 8002930:	e054      	b.n	80029dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HAL_RCC_OscConfig+0x478>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7fe ffe6 	bl	8001908 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe ffe2 	bl	8001908 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e045      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x444>
 800295e:	e03d      	b.n	80029dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d107      	bne.n	8002978 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e038      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
 800296c:	40023800 	.word	0x40023800
 8002970:	40007000 	.word	0x40007000
 8002974:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_RCC_OscConfig+0x4ec>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d028      	beq.n	80029d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d121      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d11a      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029a8:	4013      	ands	r3, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d111      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	3b01      	subs	r3, #1
 80029c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800

080029ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0cc      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a00:	4b68      	ldr	r3, [pc, #416]	; (8002ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d90c      	bls.n	8002a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b65      	ldr	r3, [pc, #404]	; (8002ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b63      	ldr	r3, [pc, #396]	; (8002ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0b8      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a40:	4b59      	ldr	r3, [pc, #356]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4a58      	ldr	r2, [pc, #352]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a58:	4b53      	ldr	r3, [pc, #332]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4a52      	ldr	r2, [pc, #328]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a64:	4b50      	ldr	r3, [pc, #320]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	494d      	ldr	r1, [pc, #308]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d044      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b47      	ldr	r3, [pc, #284]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d119      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e07f      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d003      	beq.n	8002aaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d107      	bne.n	8002aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aaa:	4b3f      	ldr	r3, [pc, #252]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e06f      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aba:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e067      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aca:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f023 0203 	bic.w	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4934      	ldr	r1, [pc, #208]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002adc:	f7fe ff14 	bl	8001908 <HAL_GetTick>
 8002ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae2:	e00a      	b.n	8002afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae4:	f7fe ff10 	bl	8001908 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e04f      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afa:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 020c 	and.w	r2, r3, #12
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d1eb      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d20c      	bcs.n	8002b34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e032      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4916      	ldr	r1, [pc, #88]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	490e      	ldr	r1, [pc, #56]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b72:	f000 f821 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8002b76:	4602      	mov	r2, r0
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	490a      	ldr	r1, [pc, #40]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	5ccb      	ldrb	r3, [r1, r3]
 8002b86:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8a:	4a09      	ldr	r2, [pc, #36]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe fe74 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023c00 	.word	0x40023c00
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	080050c0 	.word	0x080050c0
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	20000004 	.word	0x20000004

08002bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bbc:	b090      	sub	sp, #64	; 0x40
 8002bbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc8:	2300      	movs	r3, #0
 8002bca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bd0:	4b59      	ldr	r3, [pc, #356]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 030c 	and.w	r3, r3, #12
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d00d      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	f200 80a1 	bhi.w	8002d24 <HAL_RCC_GetSysClockFreq+0x16c>
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x34>
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d003      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bea:	e09b      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bec:	4b53      	ldr	r3, [pc, #332]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x184>)
 8002bee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002bf0:	e09b      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bf2:	4b53      	ldr	r3, [pc, #332]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bf4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bf6:	e098      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf8:	4b4f      	ldr	r3, [pc, #316]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c02:	4b4d      	ldr	r3, [pc, #308]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d028      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0e:	4b4a      	ldr	r3, [pc, #296]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	099b      	lsrs	r3, r3, #6
 8002c14:	2200      	movs	r2, #0
 8002c16:	623b      	str	r3, [r7, #32]
 8002c18:	627a      	str	r2, [r7, #36]	; 0x24
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c20:	2100      	movs	r1, #0
 8002c22:	4b47      	ldr	r3, [pc, #284]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c24:	fb03 f201 	mul.w	r2, r3, r1
 8002c28:	2300      	movs	r3, #0
 8002c2a:	fb00 f303 	mul.w	r3, r0, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	4a43      	ldr	r2, [pc, #268]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c32:	fba0 1202 	umull	r1, r2, r0, r2
 8002c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c38:	460a      	mov	r2, r1
 8002c3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c3e:	4413      	add	r3, r2
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c44:	2200      	movs	r2, #0
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	61fa      	str	r2, [r7, #28]
 8002c4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c52:	f7fd ff67 	bl	8000b24 <__aeabi_uldivmod>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c5e:	e053      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c60:	4b35      	ldr	r3, [pc, #212]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	099b      	lsrs	r3, r3, #6
 8002c66:	2200      	movs	r2, #0
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	617a      	str	r2, [r7, #20]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c72:	f04f 0b00 	mov.w	fp, #0
 8002c76:	4652      	mov	r2, sl
 8002c78:	465b      	mov	r3, fp
 8002c7a:	f04f 0000 	mov.w	r0, #0
 8002c7e:	f04f 0100 	mov.w	r1, #0
 8002c82:	0159      	lsls	r1, r3, #5
 8002c84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c88:	0150      	lsls	r0, r2, #5
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	ebb2 080a 	subs.w	r8, r2, sl
 8002c92:	eb63 090b 	sbc.w	r9, r3, fp
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ca2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ca6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002caa:	ebb2 0408 	subs.w	r4, r2, r8
 8002cae:	eb63 0509 	sbc.w	r5, r3, r9
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	00eb      	lsls	r3, r5, #3
 8002cbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cc0:	00e2      	lsls	r2, r4, #3
 8002cc2:	4614      	mov	r4, r2
 8002cc4:	461d      	mov	r5, r3
 8002cc6:	eb14 030a 	adds.w	r3, r4, sl
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	eb45 030b 	adc.w	r3, r5, fp
 8002cd0:	607b      	str	r3, [r7, #4]
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cde:	4629      	mov	r1, r5
 8002ce0:	028b      	lsls	r3, r1, #10
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ce8:	4621      	mov	r1, r4
 8002cea:	028a      	lsls	r2, r1, #10
 8002cec:	4610      	mov	r0, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	60fa      	str	r2, [r7, #12]
 8002cf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cfc:	f7fd ff12 	bl	8000b24 <__aeabi_uldivmod>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4613      	mov	r3, r2
 8002d06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	0c1b      	lsrs	r3, r3, #16
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	3301      	adds	r3, #1
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d22:	e002      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x184>)
 8002d26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3740      	adds	r7, #64	; 0x40
 8002d30:	46bd      	mov	sp, r7
 8002d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	00f42400 	.word	0x00f42400
 8002d40:	017d7840 	.word	0x017d7840

08002d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e041      	b.n	8002dda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe fc60 	bl	8001630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	4619      	mov	r1, r3
 8002d82:	4610      	mov	r0, r2
 8002d84:	f000 fc82 	bl	800368c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d001      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e044      	b.n	8002e86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a1e      	ldr	r2, [pc, #120]	; (8002e94 <HAL_TIM_Base_Start_IT+0xb0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d018      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x6c>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e26:	d013      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x6c>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a1a      	ldr	r2, [pc, #104]	; (8002e98 <HAL_TIM_Base_Start_IT+0xb4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00e      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x6c>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a19      	ldr	r2, [pc, #100]	; (8002e9c <HAL_TIM_Base_Start_IT+0xb8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d009      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x6c>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a17      	ldr	r2, [pc, #92]	; (8002ea0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d004      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x6c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a16      	ldr	r2, [pc, #88]	; (8002ea4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d111      	bne.n	8002e74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d010      	beq.n	8002e84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e72:	e007      	b.n	8002e84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40010000 	.word	0x40010000
 8002e98:	40000400 	.word	0x40000400
 8002e9c:	40000800 	.word	0x40000800
 8002ea0:	40000c00 	.word	0x40000c00
 8002ea4:	40014000 	.word	0x40014000

08002ea8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6a1a      	ldr	r2, [r3, #32]
 8002ec6:	f241 1311 	movw	r3, #4369	; 0x1111
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10f      	bne.n	8002ef0 <HAL_TIM_Base_Stop_IT+0x48>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6a1a      	ldr	r2, [r3, #32]
 8002ed6:	f240 4344 	movw	r3, #1092	; 0x444
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d107      	bne.n	8002ef0 <HAL_TIM_Base_Stop_IT+0x48>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e041      	b.n	8002f9c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d106      	bne.n	8002f32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f839 	bl	8002fa4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	4619      	mov	r1, r3
 8002f44:	4610      	mov	r0, r2
 8002f46:	f000 fba1 	bl	800368c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <HAL_TIM_PWM_Start+0x24>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	bf14      	ite	ne
 8002fd4:	2301      	movne	r3, #1
 8002fd6:	2300      	moveq	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e022      	b.n	8003022 <HAL_TIM_PWM_Start+0x6a>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d109      	bne.n	8002ff6 <HAL_TIM_PWM_Start+0x3e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	bf14      	ite	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	2300      	moveq	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	e015      	b.n	8003022 <HAL_TIM_PWM_Start+0x6a>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d109      	bne.n	8003010 <HAL_TIM_PWM_Start+0x58>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b01      	cmp	r3, #1
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e008      	b.n	8003022 <HAL_TIM_PWM_Start+0x6a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e068      	b.n	80030fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d104      	bne.n	800303a <HAL_TIM_PWM_Start+0x82>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003038:	e013      	b.n	8003062 <HAL_TIM_PWM_Start+0xaa>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d104      	bne.n	800304a <HAL_TIM_PWM_Start+0x92>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003048:	e00b      	b.n	8003062 <HAL_TIM_PWM_Start+0xaa>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d104      	bne.n	800305a <HAL_TIM_PWM_Start+0xa2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003058:	e003      	b.n	8003062 <HAL_TIM_PWM_Start+0xaa>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2202      	movs	r2, #2
 800305e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2201      	movs	r2, #1
 8003068:	6839      	ldr	r1, [r7, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fdb4 	bl	8003bd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a23      	ldr	r2, [pc, #140]	; (8003104 <HAL_TIM_PWM_Start+0x14c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d107      	bne.n	800308a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003088:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <HAL_TIM_PWM_Start+0x14c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d018      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x10e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309c:	d013      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x10e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a19      	ldr	r2, [pc, #100]	; (8003108 <HAL_TIM_PWM_Start+0x150>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00e      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x10e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a17      	ldr	r2, [pc, #92]	; (800310c <HAL_TIM_PWM_Start+0x154>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d009      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x10e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a16      	ldr	r2, [pc, #88]	; (8003110 <HAL_TIM_PWM_Start+0x158>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d004      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x10e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a14      	ldr	r2, [pc, #80]	; (8003114 <HAL_TIM_PWM_Start+0x15c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d111      	bne.n	80030ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2b06      	cmp	r3, #6
 80030d6:	d010      	beq.n	80030fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e8:	e007      	b.n	80030fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40010000 	.word	0x40010000
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800
 8003110:	40000c00 	.word	0x40000c00
 8003114:	40014000 	.word	0x40014000

08003118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b02      	cmp	r3, #2
 800312c:	d122      	bne.n	8003174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b02      	cmp	r3, #2
 800313a:	d11b      	bne.n	8003174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0202 	mvn.w	r2, #2
 8003144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fa77 	bl	800364e <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fa69 	bl	800363a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fa7a 	bl	8003662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b04      	cmp	r3, #4
 8003180:	d122      	bne.n	80031c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b04      	cmp	r3, #4
 800318e:	d11b      	bne.n	80031c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0204 	mvn.w	r2, #4
 8003198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fa4d 	bl	800364e <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fa3f 	bl	800363a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fa50 	bl	8003662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d122      	bne.n	800321c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d11b      	bne.n	800321c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0208 	mvn.w	r2, #8
 80031ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2204      	movs	r2, #4
 80031f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fa23 	bl	800364e <HAL_TIM_IC_CaptureCallback>
 8003208:	e005      	b.n	8003216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fa15 	bl	800363a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fa26 	bl	8003662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b10      	cmp	r3, #16
 8003228:	d122      	bne.n	8003270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	2b10      	cmp	r3, #16
 8003236:	d11b      	bne.n	8003270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0210 	mvn.w	r2, #16
 8003240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2208      	movs	r2, #8
 8003246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f9f9 	bl	800364e <HAL_TIM_IC_CaptureCallback>
 800325c:	e005      	b.n	800326a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f9eb 	bl	800363a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f9fc 	bl	8003662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	d10e      	bne.n	800329c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d107      	bne.n	800329c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0201 	mvn.w	r2, #1
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fd fdc6 	bl	8000e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a6:	2b80      	cmp	r3, #128	; 0x80
 80032a8:	d10e      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b4:	2b80      	cmp	r3, #128	; 0x80
 80032b6:	d107      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fe24 	bl	8003f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d2:	2b40      	cmp	r3, #64	; 0x40
 80032d4:	d10e      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	2b40      	cmp	r3, #64	; 0x40
 80032e2:	d107      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f9c1 	bl	8003676 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d10e      	bne.n	8003320 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b20      	cmp	r3, #32
 800330e:	d107      	bne.n	8003320 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0220 	mvn.w	r2, #32
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fdee 	bl	8003efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003342:	2302      	movs	r3, #2
 8003344:	e0ae      	b.n	80034a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b0c      	cmp	r3, #12
 8003352:	f200 809f 	bhi.w	8003494 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003356:	a201      	add	r2, pc, #4	; (adr r2, 800335c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	08003391 	.word	0x08003391
 8003360:	08003495 	.word	0x08003495
 8003364:	08003495 	.word	0x08003495
 8003368:	08003495 	.word	0x08003495
 800336c:	080033d1 	.word	0x080033d1
 8003370:	08003495 	.word	0x08003495
 8003374:	08003495 	.word	0x08003495
 8003378:	08003495 	.word	0x08003495
 800337c:	08003413 	.word	0x08003413
 8003380:	08003495 	.word	0x08003495
 8003384:	08003495 	.word	0x08003495
 8003388:	08003495 	.word	0x08003495
 800338c:	08003453 	.word	0x08003453
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f9f8 	bl	800378c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0208 	orr.w	r2, r2, #8
 80033aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0204 	bic.w	r2, r2, #4
 80033ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6999      	ldr	r1, [r3, #24]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	619a      	str	r2, [r3, #24]
      break;
 80033ce:	e064      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fa3e 	bl	8003858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6999      	ldr	r1, [r3, #24]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	021a      	lsls	r2, r3, #8
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	619a      	str	r2, [r3, #24]
      break;
 8003410:	e043      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fa89 	bl	8003930 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69da      	ldr	r2, [r3, #28]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0208 	orr.w	r2, r2, #8
 800342c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0204 	bic.w	r2, r2, #4
 800343c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69d9      	ldr	r1, [r3, #28]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	61da      	str	r2, [r3, #28]
      break;
 8003450:	e023      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fad3 	bl	8003a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800346c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69d9      	ldr	r1, [r3, #28]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	021a      	lsls	r2, r3, #8
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	61da      	str	r2, [r3, #28]
      break;
 8003492:	e002      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	75fb      	strb	r3, [r7, #23]
      break;
 8003498:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_TIM_ConfigClockSource+0x1c>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e0b4      	b.n	8003632 <HAL_TIM_ConfigClockSource+0x186>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003500:	d03e      	beq.n	8003580 <HAL_TIM_ConfigClockSource+0xd4>
 8003502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003506:	f200 8087 	bhi.w	8003618 <HAL_TIM_ConfigClockSource+0x16c>
 800350a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350e:	f000 8086 	beq.w	800361e <HAL_TIM_ConfigClockSource+0x172>
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003516:	d87f      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x16c>
 8003518:	2b70      	cmp	r3, #112	; 0x70
 800351a:	d01a      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0xa6>
 800351c:	2b70      	cmp	r3, #112	; 0x70
 800351e:	d87b      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x16c>
 8003520:	2b60      	cmp	r3, #96	; 0x60
 8003522:	d050      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003524:	2b60      	cmp	r3, #96	; 0x60
 8003526:	d877      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x16c>
 8003528:	2b50      	cmp	r3, #80	; 0x50
 800352a:	d03c      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0xfa>
 800352c:	2b50      	cmp	r3, #80	; 0x50
 800352e:	d873      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x16c>
 8003530:	2b40      	cmp	r3, #64	; 0x40
 8003532:	d058      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d86f      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x16c>
 8003538:	2b30      	cmp	r3, #48	; 0x30
 800353a:	d064      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x15a>
 800353c:	2b30      	cmp	r3, #48	; 0x30
 800353e:	d86b      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x16c>
 8003540:	2b20      	cmp	r3, #32
 8003542:	d060      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x15a>
 8003544:	2b20      	cmp	r3, #32
 8003546:	d867      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x16c>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d05c      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x15a>
 800354c:	2b10      	cmp	r3, #16
 800354e:	d05a      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x15a>
 8003550:	e062      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6899      	ldr	r1, [r3, #8]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f000 fb19 	bl	8003b98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003574:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	609a      	str	r2, [r3, #8]
      break;
 800357e:	e04f      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	6899      	ldr	r1, [r3, #8]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f000 fb02 	bl	8003b98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035a2:	609a      	str	r2, [r3, #8]
      break;
 80035a4:	e03c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f000 fa76 	bl	8003aa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2150      	movs	r1, #80	; 0x50
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 facf 	bl	8003b62 <TIM_ITRx_SetConfig>
      break;
 80035c4:	e02c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6859      	ldr	r1, [r3, #4]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	461a      	mov	r2, r3
 80035d4:	f000 fa95 	bl	8003b02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2160      	movs	r1, #96	; 0x60
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fabf 	bl	8003b62 <TIM_ITRx_SetConfig>
      break;
 80035e4:	e01c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6859      	ldr	r1, [r3, #4]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	461a      	mov	r2, r3
 80035f4:	f000 fa56 	bl	8003aa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2140      	movs	r1, #64	; 0x40
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 faaf 	bl	8003b62 <TIM_ITRx_SetConfig>
      break;
 8003604:	e00c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f000 faa6 	bl	8003b62 <TIM_ITRx_SetConfig>
      break;
 8003616:	e003      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      break;
 800361c:	e000      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800361e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003630:	7bfb      	ldrb	r3, [r7, #15]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a34      	ldr	r2, [pc, #208]	; (8003770 <TIM_Base_SetConfig+0xe4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00f      	beq.n	80036c4 <TIM_Base_SetConfig+0x38>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036aa:	d00b      	beq.n	80036c4 <TIM_Base_SetConfig+0x38>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a31      	ldr	r2, [pc, #196]	; (8003774 <TIM_Base_SetConfig+0xe8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d007      	beq.n	80036c4 <TIM_Base_SetConfig+0x38>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a30      	ldr	r2, [pc, #192]	; (8003778 <TIM_Base_SetConfig+0xec>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d003      	beq.n	80036c4 <TIM_Base_SetConfig+0x38>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a2f      	ldr	r2, [pc, #188]	; (800377c <TIM_Base_SetConfig+0xf0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d108      	bne.n	80036d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a25      	ldr	r2, [pc, #148]	; (8003770 <TIM_Base_SetConfig+0xe4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01b      	beq.n	8003716 <TIM_Base_SetConfig+0x8a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e4:	d017      	beq.n	8003716 <TIM_Base_SetConfig+0x8a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a22      	ldr	r2, [pc, #136]	; (8003774 <TIM_Base_SetConfig+0xe8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d013      	beq.n	8003716 <TIM_Base_SetConfig+0x8a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a21      	ldr	r2, [pc, #132]	; (8003778 <TIM_Base_SetConfig+0xec>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00f      	beq.n	8003716 <TIM_Base_SetConfig+0x8a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a20      	ldr	r2, [pc, #128]	; (800377c <TIM_Base_SetConfig+0xf0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00b      	beq.n	8003716 <TIM_Base_SetConfig+0x8a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <TIM_Base_SetConfig+0xf4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d007      	beq.n	8003716 <TIM_Base_SetConfig+0x8a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a1e      	ldr	r2, [pc, #120]	; (8003784 <TIM_Base_SetConfig+0xf8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d003      	beq.n	8003716 <TIM_Base_SetConfig+0x8a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <TIM_Base_SetConfig+0xfc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d108      	bne.n	8003728 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a08      	ldr	r2, [pc, #32]	; (8003770 <TIM_Base_SetConfig+0xe4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d103      	bne.n	800375c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	615a      	str	r2, [r3, #20]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800
 800377c:	40000c00 	.word	0x40000c00
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800

0800378c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f023 0201 	bic.w	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0303 	bic.w	r3, r3, #3
 80037c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f023 0302 	bic.w	r3, r3, #2
 80037d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a1c      	ldr	r2, [pc, #112]	; (8003854 <TIM_OC1_SetConfig+0xc8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d10c      	bne.n	8003802 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f023 0308 	bic.w	r3, r3, #8
 80037ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f023 0304 	bic.w	r3, r3, #4
 8003800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a13      	ldr	r2, [pc, #76]	; (8003854 <TIM_OC1_SetConfig+0xc8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d111      	bne.n	800382e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	621a      	str	r2, [r3, #32]
}
 8003848:	bf00      	nop
 800384a:	371c      	adds	r7, #28
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	40010000 	.word	0x40010000

08003858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	f023 0210 	bic.w	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f023 0320 	bic.w	r3, r3, #32
 80038a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a1e      	ldr	r2, [pc, #120]	; (800392c <TIM_OC2_SetConfig+0xd4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d10d      	bne.n	80038d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a15      	ldr	r2, [pc, #84]	; (800392c <TIM_OC2_SetConfig+0xd4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d113      	bne.n	8003904 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	621a      	str	r2, [r3, #32]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40010000 	.word	0x40010000

08003930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0303 	bic.w	r3, r3, #3
 8003966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a1d      	ldr	r2, [pc, #116]	; (8003a00 <TIM_OC3_SetConfig+0xd0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d10d      	bne.n	80039aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a14      	ldr	r2, [pc, #80]	; (8003a00 <TIM_OC3_SetConfig+0xd0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d113      	bne.n	80039da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	621a      	str	r2, [r3, #32]
}
 80039f4:	bf00      	nop
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	40010000 	.word	0x40010000

08003a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	021b      	lsls	r3, r3, #8
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	031b      	lsls	r3, r3, #12
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a10      	ldr	r2, [pc, #64]	; (8003aa0 <TIM_OC4_SetConfig+0x9c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d109      	bne.n	8003a78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	019b      	lsls	r3, r3, #6
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	621a      	str	r2, [r3, #32]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40010000 	.word	0x40010000

08003aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	f023 0201 	bic.w	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f023 030a 	bic.w	r3, r3, #10
 8003ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	621a      	str	r2, [r3, #32]
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b087      	sub	sp, #28
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f023 0210 	bic.w	r2, r3, #16
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	031b      	lsls	r3, r3, #12
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	621a      	str	r2, [r3, #32]
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f043 0307 	orr.w	r3, r3, #7
 8003b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	609a      	str	r2, [r3, #8]
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	021a      	lsls	r2, r3, #8
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	609a      	str	r2, [r3, #8]
}
 8003bcc:	bf00      	nop
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	2201      	movs	r2, #1
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a1a      	ldr	r2, [r3, #32]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	401a      	ands	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a1a      	ldr	r2, [r3, #32]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	431a      	orrs	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	621a      	str	r2, [r3, #32]
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d109      	bne.n	8003c48 <HAL_TIMEx_PWMN_Start+0x24>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	e022      	b.n	8003c8e <HAL_TIMEx_PWMN_Start+0x6a>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d109      	bne.n	8003c62 <HAL_TIMEx_PWMN_Start+0x3e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	bf14      	ite	ne
 8003c5a:	2301      	movne	r3, #1
 8003c5c:	2300      	moveq	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	e015      	b.n	8003c8e <HAL_TIMEx_PWMN_Start+0x6a>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d109      	bne.n	8003c7c <HAL_TIMEx_PWMN_Start+0x58>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	bf14      	ite	ne
 8003c74:	2301      	movne	r3, #1
 8003c76:	2300      	moveq	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	e008      	b.n	8003c8e <HAL_TIMEx_PWMN_Start+0x6a>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e063      	b.n	8003d5e <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIMEx_PWMN_Start+0x82>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ca4:	e013      	b.n	8003cce <HAL_TIMEx_PWMN_Start+0xaa>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIMEx_PWMN_Start+0x92>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cb4:	e00b      	b.n	8003cce <HAL_TIMEx_PWMN_Start+0xaa>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d104      	bne.n	8003cc6 <HAL_TIMEx_PWMN_Start+0xa2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc4:	e003      	b.n	8003cce <HAL_TIMEx_PWMN_Start+0xaa>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	6839      	ldr	r1, [r7, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f924 	bl	8003f24 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <HAL_TIMEx_PWMN_Start+0x144>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d018      	beq.n	8003d28 <HAL_TIMEx_PWMN_Start+0x104>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfe:	d013      	beq.n	8003d28 <HAL_TIMEx_PWMN_Start+0x104>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a19      	ldr	r2, [pc, #100]	; (8003d6c <HAL_TIMEx_PWMN_Start+0x148>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00e      	beq.n	8003d28 <HAL_TIMEx_PWMN_Start+0x104>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a18      	ldr	r2, [pc, #96]	; (8003d70 <HAL_TIMEx_PWMN_Start+0x14c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d009      	beq.n	8003d28 <HAL_TIMEx_PWMN_Start+0x104>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a16      	ldr	r2, [pc, #88]	; (8003d74 <HAL_TIMEx_PWMN_Start+0x150>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <HAL_TIMEx_PWMN_Start+0x104>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <HAL_TIMEx_PWMN_Start+0x154>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d111      	bne.n	8003d4c <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d010      	beq.n	8003d5c <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4a:	e007      	b.n	8003d5c <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800
 8003d74:	40000c00 	.word	0x40000c00
 8003d78:	40014000 	.word	0x40014000

08003d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e050      	b.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d018      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de0:	d013      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a18      	ldr	r2, [pc, #96]	; (8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00e      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a15      	ldr	r2, [pc, #84]	; (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d004      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d10c      	bne.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40010000 	.word	0x40010000
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40000800 	.word	0x40000800
 8003e50:	40000c00 	.word	0x40000c00
 8003e54:	40014000 	.word	0x40014000

08003e58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e03d      	b.n	8003ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	2204      	movs	r2, #4
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a1a      	ldr	r2, [r3, #32]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	401a      	ands	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1a      	ldr	r2, [r3, #32]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <__libc_init_array>:
 8003f70:	b570      	push	{r4, r5, r6, lr}
 8003f72:	4d0d      	ldr	r5, [pc, #52]	; (8003fa8 <__libc_init_array+0x38>)
 8003f74:	4c0d      	ldr	r4, [pc, #52]	; (8003fac <__libc_init_array+0x3c>)
 8003f76:	1b64      	subs	r4, r4, r5
 8003f78:	10a4      	asrs	r4, r4, #2
 8003f7a:	2600      	movs	r6, #0
 8003f7c:	42a6      	cmp	r6, r4
 8003f7e:	d109      	bne.n	8003f94 <__libc_init_array+0x24>
 8003f80:	4d0b      	ldr	r5, [pc, #44]	; (8003fb0 <__libc_init_array+0x40>)
 8003f82:	4c0c      	ldr	r4, [pc, #48]	; (8003fb4 <__libc_init_array+0x44>)
 8003f84:	f000 f820 	bl	8003fc8 <_init>
 8003f88:	1b64      	subs	r4, r4, r5
 8003f8a:	10a4      	asrs	r4, r4, #2
 8003f8c:	2600      	movs	r6, #0
 8003f8e:	42a6      	cmp	r6, r4
 8003f90:	d105      	bne.n	8003f9e <__libc_init_array+0x2e>
 8003f92:	bd70      	pop	{r4, r5, r6, pc}
 8003f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f98:	4798      	blx	r3
 8003f9a:	3601      	adds	r6, #1
 8003f9c:	e7ee      	b.n	8003f7c <__libc_init_array+0xc>
 8003f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa2:	4798      	blx	r3
 8003fa4:	3601      	adds	r6, #1
 8003fa6:	e7f2      	b.n	8003f8e <__libc_init_array+0x1e>
 8003fa8:	080050d8 	.word	0x080050d8
 8003fac:	080050d8 	.word	0x080050d8
 8003fb0:	080050d8 	.word	0x080050d8
 8003fb4:	080050dc 	.word	0x080050dc

08003fb8 <memset>:
 8003fb8:	4402      	add	r2, r0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d100      	bne.n	8003fc2 <memset+0xa>
 8003fc0:	4770      	bx	lr
 8003fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fc6:	e7f9      	b.n	8003fbc <memset+0x4>

08003fc8 <_init>:
 8003fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fca:	bf00      	nop
 8003fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fce:	bc08      	pop	{r3}
 8003fd0:	469e      	mov	lr, r3
 8003fd2:	4770      	bx	lr

08003fd4 <_fini>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	bf00      	nop
 8003fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fda:	bc08      	pop	{r3}
 8003fdc:	469e      	mov	lr, r3
 8003fde:	4770      	bx	lr
